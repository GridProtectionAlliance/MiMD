(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{15:function(e,t,n){"use strict";var a=n(14),l=n.n(a),r=n(9),i=n(10),o=n.n(i),u=n(11),s=n.n(u),c=n(0),d=function(){return(d=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var l in t=arguments[n])Object.prototype.hasOwnProperty.call(t,l)&&(e[l]=t[l]);return e}).apply(this,arguments)},m=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var a,l,r=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(a=r.next()).done;)i.push(a.value)}catch(e){l={error:e}}finally{try{a&&!a.done&&(n=r.return)&&n.call(r)}finally{if(l)throw l.error}}return i};t.a=function(e){var t=m(c.useState({ID:0,MeterID:e.ID,Note:"",UserAccount:"",Timestamp:""}),2),n=t[0],a=t[1],i=m(c.useState(!1),2),u=i[0],f=i[1],p=m(c.useState([]),2),h=p[0],y=p[1],g=m(c.useState("Timestamp"),2),b=g[0],C=g[1],S=m(c.useState(!1),2),E=S[0],D=S[1],v=m(c.useState(!1),2),N=v[0],w=v[1],I=m(c.useState(!1),2),T=I[0],F=I[1],M=m(c.useState(!1),2),L=M[0],x=M[1];if(c.useEffect((function(){var e=R();return function(){null!=e&&null!=e.abort&&e.abort()}}),[e.ID,E,b]),isNaN(e.ID))return null;function R(){if(e.ID<0)return null;var t=$.ajax({type:"GET",url:homePath+"api/MiMD/Note/"+e.ID+"/"+b+"/"+(E?1:0),contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0});return t.done((function(e){y(e)})),t}function V(e){$.ajax({type:"DELETE",url:homePath+"api/MiMD/Note/Delete",contentType:"application/json; charset=utf-8",data:JSON.stringify(e),cache:!0,async:!0}).done((function(){return R()}))}function k(t){$.ajax({type:"POST",url:homePath+"api/MiMD/Note/Add",contentType:"application/json; charset=utf-8",data:JSON.stringify(d(d({},t),{ID:0,MeterID:e.ID,Timestamp:moment().format("MM/DD/YYYY HH:mm"),UserAccount:""})),dataType:"json",cache:!0,async:!0}).done((function(t){R(),a({ID:0,MeterID:e.ID,Note:"",UserAccount:"",Timestamp:""})}))}return c.createElement("div",{className:"card",style:{marginBottom:10}},c.createElement("div",{className:"card-header"},c.createElement("div",{className:"row"},c.createElement("div",{className:"col"},c.createElement("h4",null,"Notes:")))),c.createElement("div",{className:"card-body"},c.createElement("div",null,c.createElement("div",null,c.createElement(o.a,{cols:[{key:"Note",label:"Note",headerStyle:{width:"50%"},rowStyle:{width:"50%"}},{key:"Timestamp",label:"Time",headerStyle:{width:"auto"},rowStyle:{width:"auto"},content:function(e){return moment.utc(e.Timestamp).format("MM/DD/YYYY HH:mm")}},{key:"UserAccount",label:"User",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:null,label:"",headerStyle:{width:"auto"},rowStyle:{width:"auto"},content:function(e){return c.createElement(c.Fragment,null,c.createElement("button",{className:"btn btn-sm",onClick:function(t){return a(e),void f(!0)}},c.createElement("span",null,c.createElement("i",{className:"fa fa-pencil"}))),c.createElement("button",{className:"btn btn-sm",onClick:function(t){return V(e)}},c.createElement("span",null,c.createElement("i",{className:"fa fa-times"}))))}}],tableClass:"table table-hover",data:h,sortField:b,ascending:E,onSort:function(e){e.col==b?D(!E):(D("Timestamp"!=e.col),C(e.col))},onClick:function(){},theadStyle:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%"},tbodyStyle:{display:"block",overflowY:"scroll",maxHeight:"150px",width:"100%"},rowStyle:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%"},selected:function(e){return e.ID==n.ID}}))),c.createElement(l.a,{Record:n,Rows:4,Field:"Note",Setter:function(e){return a(e)},Valid:function(){return null!=n.Note&&n.Note.length>0},Label:""}),c.createElement(r.Modal,{Show:u,Title:"Edit Note",ShowCancel:!0,CallBack:function(t){if(0!=n.Note.length||!t){if(f(!1),t){var l=s.a.cloneDeep(n);V(l),k(l)}a({ID:0,MeterID:e.ID,Note:"",UserAccount:"",Timestamp:""})}},ConfirmBtnClass:"btn-primary"+(null==n.Note||0==n.Note.length?" disabled":""),ShowX:!0,ConfirmToolTip:"Save",OnHover:function(e){return x("Confirm"==e)}},c.createElement(l.a,{Record:n,Rows:4,Field:"Note",Setter:function(e){null==e.Note?a(d(d({},e),{Note:""})):a(e)},Valid:function(){return null!=n.Note&&n.Note.length>0},Label:""})),c.createElement(r.ToolTip,{Show:L&&0==n.Note.length,Position:"top",Theme:"dark",Target:"Save",Zindex:9999},c.createElement("p",null," ",c.createElement("i",{style:{marginRight:"10px",color:"#dc3545"},className:"fa fa-exclamation-circle"}),"An empty Note can not be saved. "))),c.createElement("div",{className:"card-footer"},c.createElement("div",{className:"btn-group mr-2"},c.createElement("button",{className:"btn btn-primary"+(null==n.Note||0==n.Note.length?" disabled":""),onClick:function(){null!=n.Note&&n.Note.length>0&&k(n)},"data-tooltip":"Add",style:{cursor:null==n.Note||0==n.Note.length?"not-allowed":"pointer"},onMouseOver:function(){return w(!0)},onMouseOut:function(){return w(!1)}},"Add Note"),c.createElement(r.ToolTip,{Show:N&&(null==n.Note||0==n.Note.length),Position:"top",Theme:"dark",Target:"Add"},c.createElement("p",null," A note needs to be entered. "))),c.createElement("div",{className:"btn-group mr-2"},c.createElement("button",{className:"btn btn-default"+(null==n.Note||0==n.Note.length?" disabled":""),onClick:function(){return a((function(e){return d(d({},e),{Note:""})}))},style:{cursor:null==n.Note||0==n.Note.length?"not-allowed":"pointer"},"data-tooltip":"Remove",onMouseOver:function(){return F(!0)},onMouseOut:function(){return F(!1)}},"Clear"),c.createElement(r.ToolTip,{Show:T&&(null==n.Note||0==n.Note.length),Position:"top",Theme:"dark",Target:"Remove"},c.createElement("p",null," The note field is already empty. ")))))}},16:function(e,t,n){"use strict";var a=n(0),l=n(11),r=n(12),i=n(10),o=n.n(i),u=n(22),s=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var a,l,r=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(a=r.next()).done;)i.push(a.value)}catch(e){l={error:e}}finally{try{a&&!a.done&&(n=r.return)&&n.call(r)}finally{if(l)throw l.error}}return i},c=function(e){var t=s(a.useState(!1),2),n=t[0],i=t[1],c=s(a.useState(""),2),d=c[0],m=c[1],f=s(a.useState(!1),2),p=f[0],h=f[1],y=s(a.useState(e.Fields),2),g=y[0],b=y[1];return a.useEffect((function(){b((function(e){return l.orderBy(e,[d],[p?"asc":"desc"])}))}),[d,p]),a.useEffect((function(){b(e.Fields)}),[e.Fields]),a.createElement(a.Fragment,null,a.createElement("div",{className:"card"},a.createElement("h2",{className:"card-header"},a.createElement("button",{className:"btn btn-link btn-block text-left",type:"button",onClick:function(){return i(!n)}},null==e.Title||0==e.Title.length?"Unknown Section":e.Title)),a.createElement("div",{className:"collapse"+(n?" show":"")},a.createElement("div",{className:"card-body"},a.createElement(o.a,{cols:[{key:"Label",label:"Field",headerStyle:{width:"calc(30% - 8.25em - 130px)"},rowStyle:{width:"calc(30% - 8.25em - 130px)"},content:function(e,t,n){return a.createElement(r.Input,{Record:e,Field:"Label",Disabled:!0,Label:"",Setter:function(e){},Valid:function(){return!0}})}},{key:"FieldType",label:"Type",headerStyle:{width:"8em"},rowStyle:{width:"8em"},content:function(e,t,n){return a.createElement(r.Input,{Record:e,Field:"FieldType",Disabled:!0,Label:"",Setter:function(e){},Valid:function(){return!0}})}},{key:"Comparison",label:"",headerStyle:{width:"5em"},rowStyle:{width:"5em"},content:function(e,t,n){return a.createElement(r.Input,{Record:e,Field:"Comparison",Disabled:!0,Label:"",Setter:function(e){},Valid:function(){return!0}})}},{key:"Value",label:"Value",headerStyle:{width:"calc(60% - 8.25em)"},rowStyle:{width:"calc(60% - 8.25em)"},content:function(e,t,n){return a.createElement(u.a,{Record:e})}},{key:null,label:"",headerStyle:{width:"130px"},rowStyle:{width:"130px"},content:function(t,n,l){return a.createElement(a.Fragment,null,null!=e.OnEdit?a.createElement("button",{style:{marginTop:"16px",textAlign:"center"},className:"btn btn-sm",onClick:function(n){return e.OnEdit(t)}},a.createElement("span",null,a.createElement("i",{style:{color:"#007BFF"},className:"fa fa-pencil-square fa-3x"}))):null,null!=e.OnRemove?a.createElement("button",{style:{marginTop:"16px",textAlign:"center"},className:"btn btn-sm",onClick:function(n){return e.OnRemove(t)}},a.createElement("span",null,a.createElement("i",{className:"fa fa-times fa-3x"}))):null)}}],tableClass:"table table-hover",data:g,sortField:d,ascending:p,onSort:function(e){e.col==d?h(!p):(h(!p),m(e.col))},onClick:function(e){},theadStyle:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%"},tbodyStyle:{display:"block",width:"100%"},rowStyle:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%"},selected:function(e){return!1}})))))},d=function(e){var t=s(a.useState([]),2),n=t[0],i=t[1],o=s(a.useState([]),2),u=o[0],d=o[1];return a.useEffect((function(){var t=l.uniq(e.Fields.map((function(e){return e.Category}))),n=t.map((function(e){return[]}));e.Fields.forEach((function(e){var a=t.findIndex((function(t){return e.Category==t}));n[a].push(e)})),i(t),d(n)}),[e.Fields]),a.createElement(a.Fragment,null,a.createElement("div",{className:"card-header"},a.createElement("h4",null," Configuration ",e.Config.Name)),a.createElement("div",{className:"card-body"},a.createElement("div",{style:{height:window.innerHeight-540,maxHeight:window.innerHeight-540,overflowY:"scroll"}},a.createElement(r.Input,{Record:e.Config,Field:"Pattern",Setter:function(){},Valid:function(){return!0},Label:"File Pattern",Disabled:!0}),a.createElement("div",{className:"accordion"},n.map((function(t,n){return a.createElement(c,{Title:t,key:n,Fields:u[n],OnEdit:e.OnEdit,OnRemove:e.OnRemove})}))))),a.createElement("div",{className:"card-footer"},null!=e.OnNew?a.createElement("button",{type:"button",className:"btn btn-primary btn-sm",onClick:function(){return e.OnNew()}},"Add new Field "):null))},m=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var a,l,r=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(a=r.next()).done;)i.push(a.value)}catch(e){l={error:e}}finally{try{a&&!a.done&&(n=r.return)&&n.call(r)}finally{if(l)throw l.error}}return i},f=function(e){var t=m(a.useState(-1),2),n=t[0],l=t[1],r=m(a.useState([]),2),i=r[0],o=r[1];return a.useEffect((function(){-1==e.configurationList.findIndex((function(e){return e.ID==n}))&&e.configurationList.length>0&&l(e.configurationList[0].ID),0==e.configurationList.length&&l(-1)}),[e.configurationList]),a.useEffect((function(){if(null!=e.getFieldList)return e.getFieldList(n,o);var t=function(){if(-1==n)return null;var e=$.ajax({type:"GET",url:homePath+"api/MiMD/PRC002/Field/"+n+"/Category/1",contentType:"application/json; charset=utf-8",dataType:"json",cache:!1,async:!0});return e.done((function(e){null!=e&&o(e)})),e}();return function(){null!=t&&null!=t.abort&&t.abort()}}),[n,e.configurationList]),a.createElement(a.Fragment,null,e.configurationList.length>1?a.createElement("ul",{className:"nav nav-tabs"},e.configurationList.map((function(e,t){return a.createElement("li",{className:"nav-item",key:t},a.createElement("a",{className:"nav-link"+(n==e.ID?" active":""),onClick:function(){return l(e.ID)}},e.Name))}))):null,-1!=n&&null!=e.configurationList.find((function(e){return e.ID==n}))?a.createElement("div",{className:"tab-content",style:{maxHeight:window.innerHeight-235,overflow:"hidden"}},a.createElement(d,{Config:e.configurationList.find((function(e){return e.ID==n})),Fields:i,OnEdit:null==e.OnEdit?void 0:function(t){return e.OnEdit(t,n)},OnRemove:null==e.OnRemove?void 0:function(t){return e.OnRemove(t,n)},OnNew:null==e.OnNew?void 0:function(){return e.OnNew(n)}})):null)};t.a=f},21:function(e,t,n){"use strict";var a=n(0),l=n(3),r=n(9),i=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var a,l,r=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(a=r.next()).done;)i.push(a.value)}catch(e){l={error:e}}finally{try{a&&!a.done&&(n=r.return)&&n.call(r)}finally{if(l)throw l.error}}return i};t.a=function(e){var t=i(a.useState(""),2),n=t[0],o=t[1],u=i(a.useState(0),2),s=u[0],c=u[1],d=i(a.useState(!1),2),m=d[0],f=d[1],p=Object(l.useHistory)();function h(){null!=e.RecordId&&function(){var t={Note:n,StateId:null,RecordId:e.RecordId};null!=e.state&&(t.StateId=e.state.ID);$.ajax({type:"POST",url:homePath+"api/MiMD/PRC002/Action/Add",contentType:"application/json; charset=utf-8",data:JSON.stringify(t),dataType:"json",cache:!1,async:!0}).then((function(e){return p.go(0)}))}(),null!=e.MeterId&&("Compliance Issue"==e.state.Description?$.ajax({type:"POST",url:homePath+"api/MiMD/PRC002/ComplianceRecord/Add",contentType:"application/json; charset=utf-8",data:JSON.stringify({MeterId:e.MeterId,TimerOffset:s,Status:e.state.ID,Note:n}),dataType:"json",cache:!0,async:!0}).then((function(e){return p.go(0)})):$.ajax({type:"POST",url:homePath+"api/MiMD/PRC002/ComplianceMeter/RAPSubmitt",contentType:"application/json; charset=utf-8",data:JSON.stringify({meterId:e.MeterId,Note:n}),dataType:"json",cache:!0,async:!0}).then((function(e){return p.go(0)}))),o(""),c(0)}return a.createElement(a.Fragment,null,a.createElement(r.Modal,{Show:e.show,Title:null==e.state?"Add Compliance Note":"Acknowledged"==e.state.Description?"Acknowledge Alert":"Reviewed"==e.state.Description?"Review Alert":"RAP Submitted"==e.state.Description?"Create Remedial Action Plan":"Compliance Issue"==e.state.Description?"Submit Compliance Issue":void 0,ConfirmText:null==e.state?"Add Note":"Acknowledged"==e.state.Description?"Acknowledged Alert":"Reviewed"==e.state.Description?"Reviewed Alert":"RAP Submitted"==e.state.Description?"Create Remedial Action Plan":"Compliance Issue"==e.state.Description?"Submit":void 0,CancelBtnClass:"Cancel",CallBack:function(t){!function(t){t&&null==e.state&&(e.setShow(!1),h()),t&&null!=e.state&&f(!0),t||(e.setShow(!1),c(0),o(""))}(t)},Size:"sm"},null!=e.state&&"Compliance Issue"==e.state.Description?a.createElement("div",{className:"form-group"},a.createElement("label",null,"Note:"),a.createElement("textarea",{className:"form-control",rows:4,value:n,onChange:function(e){return o(e.target.value)}}),a.createElement("label",null,"Days out of Compliance:"),a.createElement("input",{className:"form-control",type:"number",value:s,onChange:function(e){return c(parseInt(e.target.value))}})):a.createElement("div",{className:"form-group"},a.createElement("label",null,"Note:"),a.createElement("textarea",{className:"form-control",rows:4,value:n,onChange:function(e){return o(e.target.value)}}))),a.createElement(r.Warning,{Show:m,Title:"Warning",Message:"This action can not be undone. It will create a permanent compliance record.",CallBack:function(e){e&&h(),f(!1)}}))}},22:function(e,t,n){"use strict";var a=n(0),l=n(12);t.a=function(e){var t=null!=e.Record.Description&&e.Record.Description.length>0;return a.createElement(a.Fragment,null,a.createElement("div",null,a.createElement("div",{style:{width:t?"calc(50% - 8px)":"100%",display:"inline-block",verticalAlign:"middle"}},a.createElement(l.Input,{Record:e.Record,Field:"Value",Disabled:!0,Label:"",Setter:function(e){},Valid:function(){return!0}})),t?a.createElement(a.Fragment,null,a.createElement("div",{style:{borderTop:"8px solid transparent",borderBottom:"8px solid transparent",borderRight:"8px solid #222",marginTop:-8,width:0,height:0,display:"inline-block",verticalAlign:"middle"}}),a.createElement("div",{style:{maxWidth:"50%",display:"inline-block",borderRadius:"3px",opacity:.9,color:"#fff",background:"#222",border:"1px solid transparent",fontSize:"13px",padding:"8px 21px",verticalAlign:"top"}},e.Record.Description.split("<br>").map((function(e,t){return a.createElement("p",{key:t,style:{margin:0}}," ",e," ")})))):null))}},51:function(e,t,n){"use strict";n.r(t);var a=n(0),l=n(11),r=n(3),i=n(10),o=n.n(i),u=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var a,l,r=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(a=r.next()).done;)i.push(a.value)}catch(e){l={error:e}}finally{try{a&&!a.done&&(n=r.return)&&n.call(r)}finally{if(l)throw l.error}}return i},s=function(e){var t=Object(r.useHistory)(),n=u(a.useState([]),2),l=n[0],i=n[1],s=u(a.useState("Status"),2),c=s[0],d=s[1],m=u(a.useState(!1),2),f=m[0],p=m[1];return a.useEffect((function(){var t=function(){if(-1==e.MeterId)return null;var t=$.ajax({type:"GET",url:homePath+"api/MiMD/PRC002/ComplianceRecord/"+e.MeterId+"/"+c+"/"+(f?1:0),contentType:"application/json; charset=utf-8",dataType:"json",cache:!1,async:!0});return t.done((function(e){i(e)})),t}();return function(){null!=t&&null!=t.abort&&t.abort()}}),[e.MeterId]),a.createElement(a.Fragment,null,e.MeterId>-1?a.createElement("div",{className:"row",style:{margin:0}},a.createElement("div",{className:"col",style:{width:"100%",height:"calc( 100% - 336px)",padding:0}},a.createElement(o.a,{cols:[{key:"Status",label:"Status",headerStyle:{width:"auto"},rowStyle:{width:"auto"},content:function(t,n,l){var r=e.StateList.find((function(e){return e.ID===t.Status}));return a.createElement("div",{style:{fontWeight:600,width:"90%",height:"35px",background:null==r?"#f8f9fa":r.Color,border:"2px solid",borderRadius:"5px",textAlign:"center",lineHeight:"35px",textOverflow:"ellipsis",overflow:"hidden",color:null==r?"#212529":r.TextColor}}," ",null==r?"":r.Description," ")}},{key:"Timestamp",label:"Last Updated",headerStyle:{width:"auto"},rowStyle:{width:"auto"},content:function(e,t,n){return moment(e.Timestamp).format("MM/DD/YY HH:mm CT")}},{key:"User",label:" By",headerStyle:{width:"auto"},rowStyle:{width:"auto"}}],tableClass:"table table-hover",data:l,sortField:c,ascending:f,onSort:function(e){e.col==c?p(!f):(d(e.col),p("User"==e.col))},onClick:function(e){t.push("index.cshtml?name=PRC002Change&RecordID="+e.row.ID)},theadStyle:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%"},tbodyStyle:{display:"block",overflowY:"scroll",maxHeight:window.innerHeight-300,width:"100%"},rowStyle:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%"},selected:function(e){return!1}}))):null)},c=n(9),d=n(21),m=function(){return(m=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var l in t=arguments[n])Object.prototype.hasOwnProperty.call(t,l)&&(e[l]=t[l]);return e}).apply(this,arguments)},f=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var a,l,r=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(a=r.next()).done;)i.push(a.value)}catch(e){l={error:e}}finally{try{a&&!a.done&&(n=r.return)&&n.call(r)}finally{if(l)throw l.error}}return i},p=function(e){var t=Object(r.useHistory)(),n=f(a.useState(!1),2),l=n[0],i=n[1],o=f(a.useState(void 0),2),u=o[0],s=o[1],p=f(a.useState(!1),2),h=p[0],y=p[1],g=f(a.useState(!1),2),b=g[0],C=g[1];a.useEffect((function(){var t=function(e){if(-1==e)return null;var t=$.ajax({type:"GET",url:homePath+"api/MiMD/PRC002/ComplianceMeter/One/"+e,contentType:"application/json; charset=utf-8",dataType:"json",cache:!1,async:!0});return t.done((function(e){null!=e&&s(e)})),t}(e.MeterID);return function(){null!=t&&null!=t.abort&&t.abort()}}),[e.MeterID]);var S=null==u?void 0:e.stateList.find((function(e){return e.ID==u.StatusID})),E={width:"100%",padding:0,background:null==S?"#000000":S.Color,align:"center",color:null==S?"#000000":S.TextColor,height:"25px"};return a.createElement(a.Fragment,null,a.createElement("div",{className:"col",style:{width:"50%",padding:0}},null!=u?a.createElement(a.Fragment,null,a.createElement("div",{style:m({},E)},"Meter not in Compliance"),a.createElement("div",{style:{width:"100%",fontSize:"xx-large",textAlign:"center",background:u.Timer<30?"#28a745":u.Timer<60?"#ffc107":"#dc3545",color:u.Timer<30?"#ffffff":u.Timer<60?"#212529":"#ffffff",height:"50px"}},"In Compliance"==u.Status?0:u.Timer),a.createElement("div",{style:E},"Days")):null),a.createElement("div",{className:"col",style:{width:"50%",padding:5}},null!=u?a.createElement(a.Fragment,null,u.Reviewed?a.createElement(a.Fragment,null,a.createElement("button",{type:"button",className:"btn btn-danger btn-block",onClick:function(){return C(!0)}}," Add Compliance Issue "),a.createElement("button",{type:"button",className:"btn btn-info btn-block",onClick:function(){return y(!0)}}," Submit Remedial Action Plan "),a.createElement(d.a,{MeterId:e.MeterID,state:e.stateList.find((function(e){return"Compliance Issue"===e.Description})),show:b,setShow:C}),a.createElement(d.a,{MeterId:e.MeterID,state:e.stateList.find((function(e){return"RAP Submitted"===e.Description})),show:h,setShow:y})):a.createElement(a.Fragment,null,a.createElement("button",{type:"button",className:"btn btn-info btn-block",onClick:function(){return i(!0)}}," Meter Reviewed for Compliance "),a.createElement(c.Warning,{Title:"Warning",Message:"This will activate the MiMD PRC002 monitoring for this meter. Please Review the current configuration before proceeding",CallBack:function(e){e&&($.ajax({type:"GET",url:homePath+"api/MiMD/PRC002/ComplianceMeter/Activate/"+u.ID,contentType:"application/json; charset=utf-8",dataType:"json",cache:!1,async:!0}),t.go(0)),i(!1)},Show:l}))):null))},h=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var a,l,r=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(a=r.next()).done;)i.push(a.value)}catch(e){l={error:e}}finally{try{a&&!a.done&&(n=r.return)&&n.call(r)}finally{if(l)throw l.error}}return i},y=function(e){var t=h(a.useState([]),2),n=t[0],l=t[1],r=h(a.useState(!1),2),i=r[0],u=r[1];return a.useEffect((function(){var t=function(){if(-1==e.MeterId||null==e.MeterId)return null;var t=$.ajax({type:"GET",url:homePath+"api/MiMD/PRC002/GetFiles/"+e.MeterId+"/"+(i?1:0),contentType:"application/json; charset=utf-8",dataType:"json",cache:!1,async:!0});return t.done((function(e){null!=e&&l(e)})),t}();return function(){null!=t&&null!=t.abort&&t.abort()}}),[e.MeterId,i]),a.createElement(a.Fragment,null,a.createElement(o.a,{cols:[{key:"FileName",label:"File",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:null,label:"",headerStyle:{width:"auto"},rowStyle:{width:"auto"},content:function(e,t,n){return a.createElement("button",{type:"button",className:"btn btn-primary btn-block",onClick:function(){return window.open(homePath+"api/MiMD/PRC002/DowloadFile/"+e.ID)}}," Download ")}}],tableClass:"table table-hover",data:n,sortField:"FileName",ascending:i,onSort:function(e){u(!i)},onClick:function(e){},theadStyle:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%"},tbodyStyle:{display:"block",overflowY:"scroll",maxHeight:window.innerHeight-300,width:"100%"},rowStyle:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%"},selected:function(e){return!1}}))},g=function(){return(g=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var l in t=arguments[n])Object.prototype.hasOwnProperty.call(t,l)&&(e[l]=t[l]);return e}).apply(this,arguments)},b=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var a,l,r=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(a=r.next()).done;)i.push(a.value)}catch(e){l={error:e}}finally{try{a&&!a.done&&(n=r.return)&&n.call(r)}finally{if(l)throw l.error}}return i},C=[{key:"Name",label:"Name",type:"string"},{key:"AssetKey",label:"Asset Key",type:"string"},{key:"Make",label:"Make",type:"string"},{key:"Model",label:"Model",type:"string"}],S=function(e){var t=b(a.useState([]),2),n=t[0],r=t[1],i=b(a.useState([]),2),u=i[0],s=i[1],d=b(a.useState("Name"),2),m=d[0],f=d[1],p=b(a.useState(!0),2),h=p[0],y=p[1],S=b(a.useState(C),2),E=S[0],D=S[1],v=b(a.useState("Idle"),2),N=v[0],w=v[1];return a.useEffect((function(){w("Loading");var e,t,n,a=(e=C.map((function(e){return e.key})),t=u.map((function(t){return-1==e.findIndex((function(e){return e==t.FieldName}))?g(g({},t),{isPivotColumn:!0}):t})),(n=$.ajax({type:"POST",url:homePath+"api/MiMD/PRC002/ComplianceMeter/SelectableList",contentType:"application/json; charset=utf-8",dataType:"json",data:JSON.stringify({Searches:t,OrderBy:m,Ascending:h}),cache:!1,async:!0})).done((function(e){r(e),w("Idle")})),n.fail((function(e){w("Error")})),n);return function(){null!=a&&null!=a.abort&&a.abort()}}),[e,h,m,u]),a.useEffect((function(){var e=function(){var e=$.ajax({type:"GET",url:homePath+"api/MiMD/AdditionalField/ParentTable/Meter",contentType:"application/json; charset=utf-8",cache:!1,async:!0});return e.done((function(e){var t=l.orderBy(C.concat(e.map((function(e){return g({label:"[AF"+(null!=e.ExternalDB?" "+e.ExternalDB:"")+"] "+e.FieldName},"string"==(t=e.Type)||"integer"==t||"number"==t||"datetime"==t||"boolean"==t?{type:t}:{type:"enum",enum:[{Label:t,Value:t}]});var t}))),["label"],["asc"]);D(t)})),e}();return function(){null!=e.abort&&e.abort()}}),[]),a.createElement(a.Fragment,null,a.createElement(c.SearchBar,{SetFilter:s,CollumnList:E,defaultCollumn:{key:"Name",label:"Name",type:"string"},Direction:"left",Label:"Search",Width:"100%",GetEnum:function(e,t){var n=null;return"enum"!=t.type||null==t.enum||1!=t.enum.length?function(){}:((n=$.ajax({type:"GET",url:homePath+"api/ValueList/Group/"+t.enum[0].Value,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0})).done((function(t){return e(t.map((function(e){return{Value:e.Value.toString(),Label:e.Text}})))})),function(){null!=n&&null==n.abort&&n.abort()})},Result:"Loading"==N?a.createElement(c.LoadingIcon,{Show:!0}):"Error"==N?"Could not complete Search":"Found "+n.length+" Meters"}),a.createElement("div",{style:{height:"calc( 100% - 136px)",padding:0}},a.createElement(o.a,{cols:[{key:"Name",label:"Meter",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:"Model",label:"Model",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:"Make",label:"Make",headerStyle:{width:"auto"},rowStyle:{width:"auto"}}],tableClass:"table table-hover",data:n,sortField:m,ascending:h,onSort:function(e){e.col==m?y(!h):(f(e.col),y(!0))},onClick:function(t){e.setMeter(t.row)},theadStyle:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%"},tbodyStyle:{display:"block",overflowY:"scroll",maxHeight:330,width:"100%"},rowStyle:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%"},selected:function(t){return t.ID===(null==e.selectedMeter?-1:e.selectedMeter.ID)}})))};function E(e,t){var n=e.target.files[0],a=[];if(n){var l=new FileReader;l.onload=function(e){var n=e.target.result.split(/[\r\n]+/g),l="";n.forEach((function(e,t){if(e.includes("=")){var n=e.indexOf("=");a.map((function(e){return e.key})).includes(e.substr(0,n))?a.push({key:e.substr(0,n)+"-"+t,value:e.substr(n+1),category:l}):a.push({key:e.substr(0,n),value:e.substr(n+1),category:l})}else e.includes("[")&&e.includes("]")&&(l=e.substr(e.indexOf("[")+1,e.lastIndexOf("]")-e.indexOf("[")-1))})),t(a.map((function(e,t){return{ID:t,BaseConfigId:-1,Name:e.key,Value:e.value,Comparison:"=",FieldType:"string",Category:e.category,Label:e.key,Description:""}})))},l.readAsText(n)}}function D(e,t){var n=e.target.files[0],a=[];if(n){var l=new FileReader,r=function(e,t){var n=new RegExp(t+"+$"),a=new RegExp("^"+t+"+"),l=e.replace(n,"");return l=l.replace(a,"")};l.onload=function(e){var n=e.target.result.split(/[\r\n]+/g),l=1;if(n.length>0){var i=n[0].indexOf("="),o=n[0].substring(0,i);(d=n[0].substring(i+1).trim().split(",")).length>1&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"string",Name:"Station",Value:r(d[1],'"'),Label:"Station",Category:"Header",Description:""}),l+=1),d.length>2&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"number",Name:"Nominal Frequency",Value:d[2],Label:"Nominal Frequency",Category:"Header",Description:"0: 50Hz <br> 1: 50Hz"}),l+=1),d.length>3&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"number",Name:"Num. DC Channels",Value:d[3],Label:"Num. DC Channels",Category:"Header",Description:""}),l+=1),d.length>4&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"number",Name:"Num. Analog Channels",Value:d[4],Label:"Num. Analog Channels",Category:"Header",Description:""}),l+=1),d.length>5&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"number",Name:"Num. Event Channels",Value:d[5],Label:"Num. Event Channels",Category:"Header",Description:""}),l+=1),d.length>6&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"number",Name:"Num. Triggers",Value:d[6],Label:"Num. Triggers",Category:"Header",Description:""}),l+=1),d.length>7&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"number",Name:"Shunt Type",Value:d[7],Label:"Shunt Type",Category:"Header",Description:"0: External <br> 1: Internal"}),l+=1),d.length>8&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"number",Name:"OverWrite old Records",Value:d[8],Label:"OverWrite old Records",Category:"Header",Description:"0: No <br> 1: Yes"}),l+=1),d.length>9&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"number",Name:"SER Channels in PAR",Value:d[9],Label:"SER Channels in PAR",Category:"Header",Description:"# of event channels that are set to record to SER"}),l+=1),d.length>10&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"number",Name:"SER CHannels that cause DFR Stop",Value:d[10],Label:"SER CHannels that cause DFR Stop",Category:"Header",Description:""}),l+=1),d.length>11&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"number",Name:"SER AutoStop if  #Triggers >",Value:d[11],Label:"SER AutoStop if  #Triggers >",Category:"Header",Description:""}),l+=1),d.length>12&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"number",Name:"SER AutoStop Time Period",Value:d[12],Label:"SER AutoStop Time Period",Category:"Header",Description:"in Minutes"}),l+=1),d.length>13&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"number",Name:"SER Restore Period",Value:d[13],Label:"SER Restore Period",Category:"Header",Description:"in Minutes"}),l+=1),d.length>14&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"number",Name:"Debounce Time",Value:d[14],Label:"Debounce Time",Category:"Header",Description:""}),l+=1),d.length>15&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"number",Name:"Transient Prefault",Value:d[15],Label:"Transient Prefault",Category:"Header",Description:""}),l+=1),d.length>16&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"number",Name:"Transient Postfault",Value:d[16],Label:"Transient Postfault",Category:"Header",Description:""}),l+=1),d.length>17&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"number",Name:"Transient Fault Limit",Value:d[17],Label:"Transient Fault Limit",Category:"Header",Description:""}),l+=1),d.length>18&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"number",Name:"Transient Sampling Frequency",Value:d[18],Label:"Transient Sampling Frequency",Category:"Header",Description:""}),l+=1),d.length>19&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"number",Name:"Extended Prefault",Value:d[19],Label:"Extended Prefault",Category:"Header",Description:""}),l+=1),d.length>20&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"number",Name:"Extended Post Fault",Value:d[20],Label:"Extended Post Fault",Category:"Header",Description:""}),l+=1),d.length>21&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"number",Name:"Extended Fault",Value:d[21],Label:"Extended Fault",Category:"Header",Description:""}),l+=1),d.length>22&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"number",Name:"Extended Sampling Frequency",Value:d[22],Label:"Extended Sampling Frequency",Category:"Header",Description:""}),l+=1),d.length>23&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"number",Name:"Extended RMS Cycles/Point",Value:d[23],Label:"Extended RMS Cycles/Point",Category:"Header",Description:""}),l+=1),d.length>24&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"number",Name:"Continuous Recording Samples/Point Freq-RMS-Phase",Value:d[24],Label:"Continuous Recording Samples/Point Freq-RMS-Phase",Category:"Header",Description:""}),l+=1),d.length>25&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"number",Name:"Continuous Recording Storage Length (Days)",Value:d[25],Label:"Continuous Recording Storage Length",Category:"Header",Description:"in Days"}),l+=1),d.length>26&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"number",Name:"Continous Oscillography Storage Length (Days)",Value:d[26],Label:"Continous Oscillography Storage Length",Category:"Header",Description:"in Days"}),l+=1),d.length>27&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"number",Name:"Trigger Channels - Auto Stop If # Triggers >",Value:d[27],Label:"Trigger Channels - Auto Stop If # Triggers >",Category:"Header",Description:""}),l+=1),d.length>28&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"number",Name:"Triggers Channels Auto Stop Time Period (Minutes)",Value:d[28],Label:"Triggers Channels Auto Stop Time Period",Category:"Header",Description:"in Minutes"}),l+=1),d.length>29&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"number",Name:"Triggers Channels Auto Stop - Restore After (Mins)",Value:d[29],Label:"Triggers Channels Auto Stop - Restore After",Category:"Header",Description:"in Minutes"}),l+=1),d.length>30&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"number",Name:"Triggers Channel Auto Stop - Apply to Disturbance Triggers Only (0=no 1=yes)",Value:d[30],Label:"Triggers Channel Auto Stop",Category:"Header",Description:" Apply to Disturbance Triggers Only <br> <br> 0: No <br> 1: yes"}),l+=1),d.length>31&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"number",Name:"Transient Rate Oscillography Storage (Days)",Value:d[31],Label:"Transient Rate Oscillography Storage",Category:"Header",Description:"in Days"}),l+=1),d.length>32&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"number",Name:"# Faults on Disk",Value:d[32],Label:"# Faults on Disk",Category:"Header",Description:""}),l+=1),d.length>33&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"number",Name:"Master Chassis",Value:d[33],Label:"Master Chassis",Category:"Header",Description:"0: DC1 <br> 1: DC2 <br> ...."}),l+=1),d.length>34&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"number",Name:"Extended RMS Include Phase Angle",Value:d[34],Label:"Extended RMS Include Phase Angle",Category:"Header",Description:"0: No <br> 1: Yes"}),l+=1),d.length>35&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"number",Name:"EVNOMISS (Do Not Restrict Event Only Trigger)",Value:d[35],Label:"EVNOMISS (Do Not Restrict Event Only Trigger)",Category:"Header",Description:"0: No <br> 1: Yes"}),l+=1),d.length>36&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"number",Name:"Continuous PQ Data",Value:d[36],Label:"Continuous PQ Data",Category:"Header",Description:"0: No <br> 1: Yes"}),l+=1),d.length>37&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"number",Name:"CBA Phase Rotation",Value:d[37],Label:"CBA Phase Rotation",Category:"Header",Description:"0: No <br> 1: Yes"}),l+=1),d.length>38&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"number",Name:"# of TW Channels",Value:d[38],Label:"# of TW Channels",Category:"Header",Description:""}),l+=1)}if(n.length>1){var u=n[1].indexOf("=");o=n[1].substring(0,u);(d=n[1].substring(u+1).trim().split(",")).length>0&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"number",Name:"RmSetup Chasis Port",Value:d[0],Label:"Chasis Port",Category:"RMSetup",Description:""}),l+=1),d.length>1&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"number",Name:"RMSetup Time sync",Value:d[1],Label:"Time sync",Category:"RMSetup",Description:"0: Modulated <br> 1: Unmodulated <br> 2: SNTP"}),l+=1),d.length>3&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"number",Name:"FaultLED ON Duration",Value:d[3],Label:"FaultLED ON Duration",Category:"RMSetup",Description:"in seconds"}),l+=1),d.length>4&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"number",Name:"Disk Alarm",Value:d[4],Label:"Disk Alarm",Category:"RMSetup",Description:"in MB"}),l+=1),d.length>5&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"number",Name:"DNP3 Slave",Value:d[5],Label:"DNP3 Slave",Category:"RMSetup",Description:""}),l+=1),d.length>6&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"number",Name:"DNP3 Master",Value:d[6],Label:"DNP3 Master",Category:"RMSetup",Description:""}),l+=1),d.length>7&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"number",Name:"Report Alarm States as SER",Value:d[7],Label:"Report Alarm States as SER",Category:"RMSetup",Description:""}),l+=1),d.length>8&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"number",Name:"DSP Temperature Lim",Value:d[8],Label:"DSP Temperature Lim",Category:"RMSetup",Description:""}),l+=1),d.length>9&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"number",Name:"PMU",Value:d[9],Label:"PMU",Category:"RMSetup",Description:"0: Disabled <br> 1: Enabled"}),l+=1),d.length>10&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"number",Name:"Sync loss Delay",Value:d[10],Label:"Sync loss Delay",Category:"RMSetup",Description:"in Minutes"}),l+=1),d.length>11&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"number",Name:"# Hours Different to GPS",Value:d[11],Label:"# Hours Different to GPS",Category:"RMSetup",Description:""}),l+=1),d.length>12&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"number",Name:"#HD/SSD (PC-Health)",Value:d[12],Label:"#HD/SSD (PC-Health)",Category:"RMSetup",Description:""}),l+=1),d.length>13&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"number",Name:"Traveling Wave IP Port",Value:d[13],Label:"Traveling Wave IP Port",Category:"RMSetup",Description:""}),l+=1),d.length>14&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"number",Name:"Auto DST",Value:d[14],Label:"Auto DST",Category:"RMSetup",Description:"0: No <br> 1: Yes"}),l+=1)}for(var s=2;s<n.length;){var c=n[s].indexOf("="),d=(o=n[s].substring(0,c),n[s].substring(c+1).trim().split(",")),m=o;o.startsWith("C")&&(m="Chasis "+m,d.length>0&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"string",Name:o+" - Slot 1",Value:d[0],Category:m,Label:"Slot 1",Description:"A: Analog Card <br> E: Event Card <br> V: Virtual Card <br> X: No Entry"}),l+=1),d.length>1&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"string",Name:o+" - Slot 2",Value:d[1],Category:m,Label:"Slot 2",Description:"A: Analog Card <br> E: Event Card <br> V: Virtual Card <br> X: No Entry"}),l+=1),d.length>2&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"string",Name:o+" - Slot 3",Value:d[2],Category:m,Label:"Slot 3",Description:"A: Analog Card <br> E: Event Card <br> V: Virtual Card <br> X: No Entry"}),l+=1),d.length>3&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"string",Name:o+" - Slot 4",Value:d[3],Category:m,Label:"Slot 4",Description:"A: Analog Card <br> E: Event Card <br> V: Virtual Card <br> X: No Entry"}),l+=1),d.length>4&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"string",Name:o+" - Slot 5",Value:d[4],Category:m,Label:"Slot 5",Description:"A: Analog Card <br> E: Event Card <br> V: Virtual Card <br> X: No Entry"}),l+=1),d.length>5&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"string",Name:o+" - Slot 6",Value:d[5],Category:m,Label:"Slot 6",Description:"A: Analog Card <br> E: Event Card <br> V: Virtual Card <br> X: No Entry"}),l+=1),d.length>6&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"string",Name:o+" - Slot 7",Value:d[6],Category:m,Label:"Slot 7",Description:"A: Analog Card <br> E: Event Card <br> V: Virtual Card <br> X: No Entry"}),l+=1),d.length>7&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"string",Name:o+" - Slot 8",Value:d[7],Category:m,Label:"Slot 8",Description:"A: Analog Card <br> E: Event Card <br> V: Virtual Card <br> X: No Entry"}),l+=1),d.length>8&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"string",Name:o+" - Slot 9",Value:d[8],Category:m,Label:"Slot 9",Description:"A: Analog Card <br> E: Event Card <br> V: Virtual Card <br> X: No Entry"}),l+=1),d.length>9&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"string",Name:o+" - Slot 10",Value:d[9],Category:m,Label:"Slot 10",Description:"A: Analog Card <br> E: Event Card <br> V: Virtual Card <br> X: No Entry"}),l+=1),d.length>10&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"string",Name:o+" - Slot 11",Value:d[10],Category:m,Label:"Slot 11",Description:"A: Analog Card <br> E: Event Card <br> V: Virtual Card <br> X: No Entry"}),l+=1),d.length>11&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"string",Name:o+" - DSP Address",Value:d[11],Category:m,Label:"DSP Address",Description:""}),l+=1),d.length>12&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"number",Name:o+" - EXT1 PPS",Value:d[12],Category:m,Label:"EST1 PPS",Description:"0: No <br> 1: Yes"}),l+=1),d.length>13&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"number",Name:o+" - Ignore",Value:d[13],Category:m,Label:"Ignore",Description:"0: No <br> 1: Yes"}),l+=1)),o.startsWith("A")&&(m="Analog "+m,d.length>0&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"string",Name:o+" - Name",Value:r(d[0],'"'),Category:m,Label:"Name",Description:""}),l+=1),d.length>1&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"string",Name:o+" - Type",Value:d[1],Category:m,Label:"Type",Description:""}),l+=1),d.length>2&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"number",Name:o+" - Ratio",Value:d[2],Category:m,Label:"Ratio",Description:""}),l+=1),d.length>3&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"number",Name:o+" - Full Scale",Value:d[3],Category:m,Label:"Full Scale",Description:""}),l+=1),d.length>4&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"number",Name:o+" - Ext/Int shunt",Value:d[4],Category:m,Label:"Ext/Int shunt",Description:"0: External <br> 1: Internal"}),l+=1),d.length>5&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"number",Name:o+" - Phase",Value:d[5],Category:m,Label:"Phase",Description:""}),l+=1),d.length>6&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"number",Name:o+" - Virtual Channel Assignment P1",Value:d[6],Category:m,Label:"Virtual Channel Assignment P1",Description:"-1: Wired <br> 0+: offset (e.g. 17: A18)"}),l+=1),d.length>7&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"number",Name:o+" - Virtual Channel Assignment P2",Value:d[7],Category:m,Label:"Virtual Channel Assignment P2",Description:"-1: Wired <br> 0+: offset (e.g. 17: A18)"}),l+=1),d.length>8&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"number",Name:o+" - Virtual Channel Assignment P3",Value:d[8],Category:m,Label:"Virtual Channel Assignment P3",Description:"-1: Wired <br> 0+: offset (e.g. 17: A18)"}),l+=1)),o.startsWith("T")&&(m="Trigger "+m,d.length>0&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"string",Name:o+" - Name",Value:r(d[0],'"'),Category:m,Label:"Name",Description:""}),l+=1),d.length>1&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"number",Name:o+" - Assigned Analog Channel",Value:d[1],Category:m,Label:"Analog Channel",Description:"0: A1 <br> 1: a2 <br> ..."}),l+=1),d.length>2&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"number",Name:o+" - Trigger Type",Value:d[2],Category:m,Label:"Type",Description:"0: Disabled <br> 1: RMS <br> 2: Hz Step <br> 3: 0 Sequence <br> 4: + Sequence <br> 5: - Sequence <br> 6: HD <br> 7: THD <br> 8: 1P-W <br> 9: 1P-Vr <br> 10: 1P-PF <br> 11: 3P-W <br> 12: 3P-Vr <br> 13: 3P-PF <br> 14: Impulse <br> 15: Unbalance <br> 16: Flicker <br> 17: Hz <br> 18: Hz Sign <br> 19: Gen-W <br> 20: Gen Vr <br> 21: Gen-PF <br> 22: Magnitude"}),l+=1),d.length>3&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"number",Name:o+" - Trigger Condition",Value:d[3],Category:m,Label:"Condition",Description:"0: Over <br> 1: Under <br> 2: Both <br>"}),l+=1),d.length>4&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"number",Name:o+" - Duration",Value:d[4],Category:m,Label:"Duration",Description:""}),l+=1),d.length>5&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"number",Name:o+" - Trip if Over",Value:d[5],Category:m,Label:"Trip on over",Description:""}),l+=1),d.length>6&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"number",Name:o+" - Trip if Under",Value:d[6],Category:m,Label:"Trip on under",Description:""}),l+=1),d.length>7&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"number",Name:o+" - Trip if Rate",Value:d[7],Category:m,Label:"Trip on rate",Description:""}),l+=1),d.length>8&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"number",Name:o+" - Hysteresis",Value:d[8],Category:m,Label:"Hysteresis",Description:""}),l+=1),d.length>9&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"number",Name:o+" - Priority",Value:d[9],Category:m,Label:"Priority",Description:"0: No <br> 1: Yes"}),l+=1),d.length>13&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"number",Name:o+" - Disturbance",Value:d[13],Category:m,Label:"Disturbance",Description:"0: No <br> 1: Yes"}),l+=1),d.length>14&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"number",Name:o+" - Minimum RMS",Value:d[14],Category:m,Label:"Min RMS",Description:"For HZ Step, Harmonic and certain other Triggers <br> Trigger disabled if Value < Min RMS"}),l+=1)),o.startsWith("E")&&(m="Event Channel"+m,d.length>0&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"string",Name:o+" - Name",Value:r(d[0],'"'),Category:m,Label:"Name",Description:""}),l+=1),d.length>1&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"string",Name:o+" - State",Value:d[1],Category:m,Label:"State",Description:"o: Open <br> c: Close"}),l+=1),d.length>2&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"string",Name:o+" - DFR Start",Value:d[2],Category:m,Label:"DFR Start",Description:"i: INhibited <br> u: Up <br> d: Down <br> b: Both <br> Capital Letters indicate Priority Trigger"}),l+=1),d.length>3&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"string",Name:o+" - DFR/SER",Value:d[3],Category:m,Label:"DFR/SER",Description:"B: Both <br> D: DFR <br> S: SER"}),l+=1),d.length>4&&(a.push({ID:l,BaseConfigId:-1,Comparison:"=",FieldType:"string",Name:o+" - SER Run",Value:d[4],Category:m,Label:"SER Run",Description:"R: Run <br> S: Stop <br> A: Alarm <br> C: CrossTrigger"}),l+=1)),s+=1}t(a)},l.readAsText(n)}}var v=n(12),N=n(22),w=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var a,l,r=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(a=r.next()).done;)i.push(a.value)}catch(e){l={error:e}}finally{try{a&&!a.done&&(n=r.return)&&n.call(r)}finally{if(l)throw l.error}}return i},I=function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(w(arguments[t]));return e},T=function(e){var t=w(a.useState(!1),2),n=t[0],l=t[1];return a.createElement(a.Fragment,null,a.createElement("div",{className:"card"},a.createElement("h2",{className:"card-header"},a.createElement("button",{className:"btn btn-link btn-block text-left",type:"button",onClick:function(){return l(!n)}},e.Title)),a.createElement("div",{className:"collapse"+(n?" show":"")},a.createElement("div",{className:"card-body"},a.createElement(i.SelectTable,{cols:[{key:"Label",label:"Field",headerStyle:{width:"calc(30% - 8.25em)"},rowStyle:{width:"calc(30% - 8.25em)"},content:function(e,t,n){return a.createElement(v.Input,{Record:e,Field:"Label",Disabled:!0,Label:"",Setter:function(e){},Valid:function(){return!0}})}},{key:"FieldType",label:"Type",headerStyle:{width:"8em"},rowStyle:{width:"8em"},content:function(e,t,n){return a.createElement(v.Input,{Record:e,Field:"FieldType",Disabled:!0,Label:"",Setter:function(e){},Valid:function(){return!0}})}},{key:"Comparison",label:"",headerStyle:{width:"5em"},rowStyle:{width:"5em"},content:function(e,t,n){return a.createElement(v.Input,{Record:e,Field:"Comparison",Disabled:!0,Label:"",Setter:function(e){},Valid:function(){return!0}})}},{key:"Value",label:"Value",headerStyle:{width:"calc(70% - 8.25em)"},rowStyle:{width:"calc(70% - 8.25em)"},content:function(e,t,n){return a.createElement(N.a,{Record:e})}}],KeyField:"ID",tableClass:"table table-hover",data:e.fields,sortField:"Category",ascending:!0,onSelection:function(t){e.setFields(t)},theadStyle:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%"},tbodyStyle:{display:"block",width:"100%"},rowStyle:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%"}})))))},F=function(e){var t=w(a.useState(new Map),2),n=t[0],r=t[1],i=w(a.useState(new Map),2),o=i[0],u=i[1];return a.useEffect((function(){var t=new Map;e.Fields.forEach((function(e){t.has(e.Category)?t.get(e.Category).push(e):t.set(e.Category,[e])})),r(t),u(new Map)}),[e.Fields]),a.useEffect((function(){var t=[].concat.apply([],I(I(o.keys()).map((function(e){return o.get(e)}))));e.setSelectedFields(t)}),[o]),a.createElement(a.Fragment,null,a.createElement("div",{className:"accordion",style:{maxHeight:window.innerHeight-300,overflowY:"scroll"}},I(n.keys()).map((function(e,t){return a.createElement(T,{Title:e,key:t,fields:n.get(e),setFields:function(t){u((function(n){var a=l.cloneDeep(n);return a.set(e,t),a}))}})}))))},M=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var a,l,r=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(a=r.next()).done;)i.push(a.value)}catch(e){l={error:e}}finally{try{a&&!a.done&&(n=r.return)&&n.call(r)}finally{if(l)throw l.error}}return i},L=function(e){var t=M(a.useState([]),2),n=t[0],r=t[1];return a.useEffect((function(){r(e.data.Value.split(";"))}),[e.data]),a.createElement(a.Fragment,null,n.map((function(t,r){return a.createElement("div",{className:"form-group"},0==r?a.createElement("label",null,"Values"):null,a.createElement("div",{className:"input-group"},a.createElement("input",{className:"form-control",onChange:function(t){!function(t,a){var r=l.cloneDeep(e.data),i=l.clone(n);i[t]=a,r.Value=i.join(";"),e.Setter(r)}(r,t.target.value)},value:t}),a.createElement("div",{className:"input-group-append",onClick:function(){return function(t){var a=l.cloneDeep(e.data),r=l.clone(n);r.splice(t,1),a.Value=r.join(";"),e.Setter(a)}(r)}},a.createElement("span",{className:"input-group-text"},a.createElement("i",{className:"fa fa-trash-o","aria-hidden":"true"})))))})),a.createElement("button",{type:"button",className:"btn btn-primary btn-sm",onClick:function(){return t=l.cloneDeep(e.data),(a=l.clone(n)).push("string"==e.data.FieldType?"Value":"0"),t.Value=a.join(";"),void e.Setter(t);var t,a}}," Add "))},x=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var a,l,r=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(a=r.next()).done;)i.push(a.value)}catch(e){l={error:e}}finally{try{a&&!a.done&&(n=r.return)&&n.call(r)}finally{if(l)throw l.error}}return i},R=function(e){var t=x(a.useState(!1),2),n=t[0],l=t[1],r=null!=e.Field.Description&&e.Field.Description.length>0;return a.createElement(a.Fragment,null,a.createElement(v.Select,{Record:e.Field,Field:"FieldType",Options:[{Value:"string",Label:"Text"},{Value:"number",Label:"Number"}],Label:"Field Type",Setter:function(t){t.FieldType!==e.Field.FieldType&&"<>"!=t.Comparison&&"="!=t.Comparison&&(t.Comparison="="),e.Setter(t)}}),a.createElement(v.Input,{Record:e.Field,Field:"Category",Setter:function(t){e.Setter(t)},Valid:function(){return!0},Label:"Category"}),a.createElement(v.Input,{Record:e.Field,Field:"Label",Setter:function(t){e.Setter(t)},Valid:function(){return null!=e.Field.Label&&e.Field.Label.length>0},Label:"Field Name"}),a.createElement(v.Input,{Record:e.Field,Field:"Name",Setter:function(t){e.Setter(t)},Valid:function(){return null!=e.Field.Name&&e.Field.Name.length>0},Label:"Field Key"}),a.createElement(v.Select,{Record:e.Field,Field:"Comparison",Options:"number"==e.Field.FieldType?[{Value:"=",Label:"="},{Value:"<>",Label:"<>"},{Value:">",Label:">"},{Value:"<",Label:"<"}]:[{Value:"=",Label:"="},{Value:"<>",Label:"<>"},{Value:"IN",Label:"In"}],Label:"Rule",Setter:function(t){e.Setter(t)}}),a.createElement("div",{onMouseEnter:function(){return l(!0)},onMouseLeave:function(){return l(!1)},"data-tooltip":"Description"},"IN"==e.Field.Comparison?a.createElement(L,{data:e.Field,Setter:function(t){e.Setter(t)}}):a.createElement(v.Input,{Record:e.Field,Field:"Value",Setter:function(t){e.Setter(t)},Valid:function(){return null!=e.Field.Value&&e.Field.Value.length>0&&("number"!=e.Field.FieldType||!isNaN(parseFloat(e.Field.Value)))},Label:"Value",Feedback:"number"!=e.Field.FieldType?"Value is required.":"Value is required and needs to be a number."})),a.createElement(c.ToolTip,{Show:n&&r,Position:"top",Target:"Description"},a.createElement("p",null,e.Field.Description)))},V=function(e){return a.createElement(a.Fragment,null,a.createElement(v.Input,{Record:e.Record,Field:"Name",Setter:e.SetRecord,Valid:function(){return null!=e.Record.Name&&e.Record.Name.length>0&&e.UniqueKey},Feedback:"Name is required and must be unique",Label:"Name"}),a.createElement(v.Input,{Record:e.Record,Field:"Pattern",Setter:e.SetRecord,Valid:function(){return null!=e.Record.Pattern&&e.Record.Pattern.length>0},Label:"File Pattern",Feedback:"File Pattern is required."})," ")},k=n(16),P=function(){return(P=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var l in t=arguments[n])Object.prototype.hasOwnProperty.call(t,l)&&(e[l]=t[l]);return e}).apply(this,arguments)},B=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var a,l,r=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(a=r.next()).done;)i.push(a.value)}catch(e){l={error:e}}finally{try{a&&!a.done&&(n=r.return)&&n.call(r)}finally{if(l)throw l.error}}return i},A=function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(B(arguments[t]));return e},j=function(e){var t=B(a.useState({ID:-1,MeterId:-1,Name:"All INI Files",Pattern:"*.ini"}),2),n=t[0],r=t[1],i=B(a.useState({ID:-1,BaseConfigId:-1,Comparison:"=",FieldType:"string",Name:"Field",Value:"",Category:"",Label:"Field",Description:""}),2),o=i[0],u=i[1],s=B(a.useState(!0),2),c=s[0],d=s[1],m=B(a.useState(""),2),f=m[0],p=m[1],h=B(a.useState([]),2),y=h[0],g=h[1],b=B(a.useState([]),2),C=b[0],S=b[1];function v(e){e=e.toLowerCase().replace(" ","");return/(?:\.([^.]+))?$/.exec(e)[1]}function N(t,n){p(t),g(n.map((function(e){return e.BaseConfigId=-1,e}))),e.setStep("File Load"),e.setLoading(!1)}return a.useEffect((function(){return"BaseConfig"!=e.step?function(){}:($(".custom-file-input").on("change",(function(t){var n=t.target.value.split("\\").pop();$(t.target).siblings(".custom-file-label").addClass("selected").html(n),function(t,n){e.setLoading(!0),"ini"==v(n)&&E(t,(function(e){return N(n,e)}));"par"==v(n)?D(t,(function(e){return N(n,e)})):e.setLoading(!1)}(t,n)})),function(){return $(".custom-file-input").off("change")})}),[e.step]),a.useEffect((function(){var t=[];"BaseConfig"==e.step&&(0==e.BaseConfigs.size&&t.push("At least 1 Base Configuration needs to be set up."),e.BaseConfigs.size>0&&A(e.BaseConfigs.keys()).forEach((function(n){0==e.BaseConfigs.get(n)[1].length&&t.push("At least 1 Field needs to be set up in Configuration '"+e.BaseConfigs.get(n)[0].Name+"'")}))),"New BaseConfig"==e.step&&(null!=n.Name&&0!=n.Name.length||t.push("A Name is required."),null!=n.Pattern&&0!=n.Pattern.length||t.push("A Pattern is required (e.g. *.ini or *.par for allINI or PAR Files)."),null==n.Name||c||t.push("Key needs to be unique.")),"Edit Field"==e.step&&(null!=o.Name&&0!=o.Name.length||t.push("A Field Key is required."),null!=o.Label&&0!=o.Label.length||t.push("A Field Name is required."),null!=o.Value&&0!=o.Value.length||t.push("A Value is required."),null!=o.Value&&"number"==o.FieldType&&isNaN(parseFloat(o.Value))&&t.push("A Value for a Number Field needs to be numeric.")),"File Load"==e.step&&(C.length>0||t.push("At least one Field needs to be selected.")),e.setError(t)}),[e.step,e.BaseConfigs,n,c,o,C]),a.useEffect((function(){-1==A(e.BaseConfigs.values()).map((function(e){return e[0]})).findIndex((function(e){return e.Name==n.Name}))?d(!0):d(!1)}),[e.BaseConfigs,n]),a.useEffect((function(){"New BaseConfig"==e.step&&r({ID:-1,MeterId:-1,Name:"Base Config Name",Pattern:"*.ini"}),"Edit Field"==e.step&&u({ID:-1,BaseConfigId:-1,Comparison:"=",FieldType:"string",Name:"Field",Value:"",Label:"Field",Category:"",Description:""}),"File Load"==e.step&&(g([]),S([])),"BaseConfig"!=e.step?e.setStep("BaseConfig"):e.setStep("Meter")}),[e.reset]),a.useEffect((function(){if("New BaseConfig"==e.step){var t=((s=l.cloneDeep(e.BaseConfigs)).size>0?Math.max.apply(Math,A(s.keys())):0)+1;s.set(t,[P(P({},n),{ID:t}),[]]),e.setBaseConfig(s),r({ID:-1,MeterId:-1,Name:"Base Config Name",Pattern:"*.ini"})}if("Edit Field"==e.step&&-1==o.ID){t=(a=(s=l.cloneDeep(e.BaseConfigs)).get(o.BaseConfigId))[1].length>0?Math.max.apply(Math,A(a[1].map((function(e){return e.ID}))))+1:1;a[1]=A(a[1],[P(P({},o),{ID:t})]),s.set(o.BaseConfigId,a),e.setBaseConfig(s),u({ID:-1,BaseConfigId:-1,Comparison:"=",FieldType:"string",Name:"Field",Value:"",Label:"Field",Category:"",Description:""})}if("Edit Field"==e.step&&-1!=o.ID){var a,i=(a=(s=l.cloneDeep(e.BaseConfigs)).get(o.BaseConfigId))[1].findIndex((function(e){return e.ID==o.ID}));a[1][i]=o,s.set(o.BaseConfigId,a),e.setBaseConfig(s),u({ID:-1,BaseConfigId:-1,Comparison:"=",FieldType:"string",Name:"Field",Value:"",Label:"Field",Category:"",Description:""})}if("File Load"==e.step){t=((s=l.cloneDeep(e.BaseConfigs)).size>0?Math.max.apply(Math,A(s.keys())):0)+1;for(var s,c=C.map((function(e,t){return P({ID:t+1},e)})),d=f,m=0;A(e.BaseConfigs.values()).map((function(e){return e[0]})).findIndex((function(e){return e.Name==d}))>-1;)d=f+" "+(m+=1);s.set(t,[{Name:d,Pattern:"**/"+f,MeterId:-1,ID:t},c]),e.setBaseConfig(s),g([]),S([])}e.setStep("BaseConfig")}),[e.cont]),a.createElement(a.Fragment,null,"BaseConfig"==e.step?a.createElement("div",null,a.createElement(k.a,{configurationList:A(e.BaseConfigs.values()).map((function(e){return e[0]})),getFieldList:function(t,n){return e.BaseConfigs.has(t)&&n(e.BaseConfigs.get(t)[1]),function(){}},OnEdit:function(t,n){return function(t,n){e.setStep("Edit Field"),u(P(P({},t),{BaseConfigId:n}))}(t,n)},OnNew:function(t){return n=t,e.setStep("Edit Field"),void u((function(e){return P(P({},e),{BaseConfigId:n})}));var n}}),a.createElement("hr",null),a.createElement("div",{className:"row"},a.createElement("div",{className:"col"},a.createElement("div",{className:"form-group",style:{width:"100%"}},a.createElement("div",{className:"custom-file"},a.createElement("input",{type:"file",className:"custom-file-input",accept:".ini,.par"}),a.createElement("label",{className:"custom-file-label"},"Choose a Configuration File if applicable")))),a.createElement("div",{className:"col"},a.createElement("button",{type:"button",className:"btn btn-primary btn-block",onClick:function(){e.setStep("New BaseConfig")}}," Add New Base Configuration ")))):null,"New BaseConfig"==e.step?a.createElement(V,{Record:n,SetRecord:r,UniqueKey:c}):null,"Edit Field"==e.step?a.createElement(R,{Field:o,Setter:u}):null,"File Load"==e.step?a.createElement(F,{Fields:y,setSelectedFields:S}):null)},O=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var a,l,r=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(a=r.next()).done;)i.push(a.value)}catch(e){l={error:e}}finally{try{a&&!a.done&&(n=r.return)&&n.call(r)}finally{if(l)throw l.error}}return i},H=function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(O(arguments[t]));return e},W=function(e){var t=Object(r.useHistory)(),n=O(a.useState(null),2),l=n[0],i=n[1],o=O(a.useState("Meter"),2),u=o[0],s=o[1],d=O(a.useState(!1),2),m=d[0],f=d[1],p=O(a.useState(!1),2),h=p[0],y=p[1],g=O(a.useState("None"),2),b=g[0],C=g[1],E=O(a.useState(!1),2),D=E[0],v=E[1],N=O(a.useState(new Map),2),w=N[0],I=N[1],T=O(a.useState([]),2),F=T[0],M=T[1],L=O(a.useState(0),2),x=L[0],R=L[1],V=O(a.useState(0),2),k=V[0],P=V[1];a.useEffect((function(){e.show||(s("Meter"),i(void 0),I(new Map),M([]))}),[e.show]);var B="Meter"==u?null!=l:0==F.length;return a.createElement(a.Fragment,null,a.createElement(c.Modal,{Show:e.show,CallBack:function(e,t){e&&B&&("Meter"!=u?("New BaseConfig"==u&&P((function(e){return e+1})),"File Load"==u&&P((function(e){return e+1})),"BaseConfig"==u&&y(!0),"Edit Field"==u&&P((function(e){return e+1}))):s("BaseConfig")),t||f(!0),!e&&t&&("Meter"==u&&f(!0),"BaseConfig"==u&&R((function(e){return e+1})),"New BaseConfig"!=u&&"File Load"!=u||R((function(e){return e+1})),"Edit Field"==u&&R((function(e){return e+1})))},Title:"Meter"==u?"Select a Meter":"BaseConfig"==u?"Setup Base Configuration":"File Load"==u?"Load Configuration File":"New BaseConfig"==u?"Add New Base Configuration":"Edit Field"==u?"Edit Configuration Field":void 0,ConfirmText:"Meter"==u||"File Load"==u?"Next":"Save",ConfirmToolTip:"WizardConfirm",Size:"xlg",OnHover:C,ConfirmBtnClass:"btn-success"+(B?"":" disabled"),CancelText:"Meter"==u?"Close":"Back",ShowX:!0},"Meter"==u?a.createElement(S,{setMeter:function(e){i(e)},selectedMeter:l}):null,"BaseConfig"==u||"New BaseConfig"==u||"File Load"==u||"Edit Field"==u?a.createElement(j,{setLoading:v,BaseConfigs:w,setBaseConfig:I,setError:M,setStep:s,step:u,cont:k,reset:x}):null),a.createElement(c.Warning,{Title:"Exit Wizard",CallBack:function(t){f(!1),t&&e.setShow(!1)},Show:m,Message:"This Will close the Wizard and all progress will be lost."}),a.createElement(c.ToolTip,{Show:"Confirm"==b&&!B,Position:"top",Target:"WizardConfirm",Zindex:9999},"Meter"==u?a.createElement("p",null," ",a.createElement("i",{style:{marginRight:"10px",color:"#dc3545"},className:"fa fa-exclamation-circle"}),"A Meter needs to be selected."):null,"Meter"!=u?F.map((function(e,t){return a.createElement("p",{key:t},a.createElement("i",{style:{marginRight:"10px",color:"#dc3545"},className:"fa fa-exclamation-circle"})," ",e)})):null),a.createElement(c.Warning,{Title:"Save PRC002 Configuration",CallBack:function(n){var a;y(!1),n&&(a=[],H(w.keys()).forEach((function(e){w.get(e)[1].forEach((function(t){a.push({BaseConfigId:e,Comparison:t.Comparison,FieldType:t.FieldType,Name:t.Name,Value:t.Value,Description:t.Description,Category:t.Category,Label:t.Label})}))})),$.ajax({type:"POST",url:homePath+"api/MiMD/PRC002/ComplianceMeter/Add",contentType:"application/json; charset=utf-8",data:JSON.stringify({Meter:{MeterId:l.ID,Active:!1,Reviewed:!1},BaseConfiguration:H(w.values()).map((function(e){return{Name:e[0].Name,Pattern:e[0].Pattern,ID:e[0].ID}})),ConfigurationFields:a}),dataType:"json",cache:!1,async:!0}).then((function(e){return t.go(0)})),e.setShow(!1))},Show:h,Message:"This will add the selected meter to PRC002 monitoring and save the base configuration. Note that the status of this meter will not update until the first configuration File is downloaded."}),a.createElement(c.LoadingScreen,{Show:D}))},z=function(){return(z=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var l in t=arguments[n])Object.prototype.hasOwnProperty.call(t,l)&&(e[l]=t[l]);return e}).apply(this,arguments)},Y=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var a,l,r=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(a=r.next()).done;)i.push(a.value)}catch(e){l={error:e}}finally{try{a&&!a.done&&(n=r.return)&&n.call(r)}finally{if(l)throw l.error}}return i},G=function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(Y(arguments[t]));return e},q=function(e){var t=Y(a.useState("view"),2),n=t[0],r=t[1],i=Y(a.useState(!1),2),o=i[0],u=i[1],s=Y(a.useState(!1),2),d=s[0],m=s[1],f=Y(a.useState(""),2),p=f[0],h=f[1],y=Y(a.useState("None"),2),g=y[0],b=y[1],C=Y(a.useState([]),2),S=C[0],v=C[1],N=Y(a.useState([]),2),w=N[0],I=N[1],T=Y(a.useState([]),2),M=T[0],L=T[1],x=Y(a.useState([]),2),P=x[0],B=x[1],A=Y(a.useState([]),2),j=A[0],O=A[1],H=Y(a.useState([]),2),W=H[0],q=H[1],U=Y(a.useState({ID:-1,MeterId:e.MeterID,Name:"New Configuration",Pattern:"*.ini"}),2),X=U[0],J=U[1],K=Y(a.useState(!0),2),Z=K[0],Q=K[1],_=Y(a.useState(null),2),ee=_[0],te=_[1],ne=Y(a.useState({ID:-1,BaseConfigId:-1,Comparison:"=",FieldType:"string",Name:"Field",Value:"",Category:"",Label:"Field",Description:""}),2),ae=ne[0],le=ne[1],re=Y(a.useState(!1),2),ie=re[0],oe=re[1],ue=Y(a.useState(!1),2),se=ue[0],ce=ue[1],de=Y(a.useState(!1),2),me=de[0],fe=de[1];function pe(e){e=e.toLowerCase().replace(" ","");return/(?:\.([^.]+))?$/.exec(e)[1]}function he(e,t){h(e),v(t.map((function(e){return e.BaseConfigId=-1,e}))),I([]),r("upload"),u(!1)}a.useEffect((function(){var t=function(){if(null==e.MeterID)return null;var t=$.ajax({type:"GET",url:homePath+"api/MiMD/PRC002/BaseConfig?parentID="+e.MeterID,contentType:"application/json; charset=utf-8",dataType:"json",cache:!1,async:!0});return t.done((function(e){null!=e&&q(e)})),t}();return function(){null!=t&&null!=t.abort&&t.abort()}}),[e.MeterID,e.show]),a.useEffect((function(){O((function(e){var t=e.filter((function(e){return M.findIndex((function(t){return t==e.ID}))>-1}));return G(W,t)}))}),[W]),a.useEffect((function(){e.show||(r("view"),B([]),L([]))}),[e.show]),a.useEffect((function(){return"edit"!=n?function(){}:($(".custom-file-input").on("change",(function(e){var t=e.target.value.split("\\").pop();$(e.target).siblings(".custom-file-label").addClass("selected").html(t),function(e,t){u(!0),"ini"==pe(t)&&E(e,(function(e){return he(t,e)}));"par"==pe(t)?D(e,(function(e){return he(t,e)})):u(!1)}(e,t)})),function(){return $(".custom-file-input").off("change")})}),[n]),a.useEffect((function(){-1==j.findIndex((function(e){return e.Name==X.Name}))?Q(!0):Q(!1)}),[j,X]),a.useEffect((function(){if(null!=ee){var e=function(){if(oe(!1),ce(!1),null==ee)return null;var e=$.ajax({type:"GET",url:homePath+"api/MiMD/PRC002/Field/AllowChange/"+ee.fld.ID,contentType:"application/json; charset=utf-8",dataType:"json",cache:!1,async:!0});return e.done((function(e){null!=e&&(e&&"delete"==ee.mode&&oe(!0),e||(ce(!0),r("edit")),e&&"edit"==ee.mode&&le(ee.fld))})),e}();return function(){null!=e&&null!=e.abort&&e.abort()}}}),[ee]);var ye=null!=X.Name&&X.Name.length>0&&null!=X.Pattern&&X.Pattern.length>0&&Z,ge=null!=ae&&null!=ae.Name&&ae.Name.length>0&&null!=ae.Label&&ae.Label.length>0&&null!=ae.Value&&ae.Value.length>0&&("number"!=ae.FieldType||!isNaN(parseFloat(ae.Value))),be="edit"==n&&P.some((function(e){return 0==e.length}))||"new"==n&&!ye||"upload"==n&&0==w.length||"editField"==n&&!ge?" disabled":"";return a.createElement(a.Fragment,null,a.createElement(c.Modal,{Title:"Meter Base Configuration",Show:e.show,CallBack:function(t,a){var i;a||"view"!=n||e.setShow(!1),a&&!t&&"view"==n&&e.setShow(!1),a||"view"==n||m(!0),a&&!t&&"edit"==n&&m(!0),a&&!t&&"edit"!=n&&"view"!=n&&r("edit"),a&&t&&"upload"==n&&function(){if(0!=w.length){for(var t=Math.max.apply(Math,G(j.map((function(e){return e.ID}))))+1,n=p,a=0;j.findIndex((function(e){return e.Name==n}))>-1;)n=p+" "+(a+=1);O((function(a){var r=l.cloneDeep(a);return r.push({Name:n,MeterId:e.MeterID,Pattern:"**/"+p,ID:t}),r})),L((function(e){var n=l.cloneDeep(e);return n.push(t),n})),r("edit"),B((function(e){var t=l.cloneDeep(e);return t.push(w),t}))}}(),a&&t&&"view"==n&&r("edit"),a&&t&&"new"==n&&ye&&(i=Math.max.apply(Math,G(j.map((function(e){return e.ID}))))+1,O((function(e){var t=l.cloneDeep(e);return t.push(z(z({},X),{ID:i})),t})),L((function(e){var t=l.cloneDeep(e);return t.push(i),t})),J({ID:-1,MeterId:e.MeterID,Name:"New Configuration",Pattern:"*.ini"}),r("edit"),B((function(e){var t=l.cloneDeep(e);return t.push([]),t}))),a&&t&&"edit"==n&&(P.some((function(e){return 0==e.length}))||(M.forEach((function(e,t){$.ajax({type:"POST",url:homePath+"api/MiMD/PRC002/BaseConfig/Add",contentType:"application/json; charset=utf-8",data:JSON.stringify(z(z({},j.find((function(t){return t.ID==e}))),{Fields:P[t]})),dataType:"json",cache:!1,async:!0})})),e.setShow(!1))),a&&t&&"editField"==n&&ge&&function(){if(ae.ID,M.findIndex((function(e){return e==ae.BaseConfigId}))>-1){var e=M.findIndex((function(e){return e==ae.BaseConfigId}));B((function(t){var n=l.cloneDeep(t),a=n[e].findIndex((function(e){return e.ID==ae.ID}));return n[e][a]=ae,n}))}fe(!0)}()},Size:"xlg",ConfirmToolTip:"ConfigConfirm",OnHover:b,ShowX:!0,ShowCancel:!0,ConfirmText:"edit"==n||"editField"==n?"Save":"view"==n?"Edit":"Next",ConfirmBtnClass:("view"!=n?"btn-success":"btn-primary")+be,CancelBtnClass:"view"!=n?void 0:"btn-primary",CancelText:"view"==n?"Close":"edit"==n?"Cancel":"Back"},"edit"==n||"view"==n?a.createElement(k.a,{configurationList:j,getFieldList:function(e,t){var n=M.findIndex((function(t){return t==e}));if(n>-1)return t(P[n]),function(){};if(-1==e)return function(){};var a=$.ajax({type:"GET",url:homePath+"api/MiMD/PRC002/Field/"+e+"/Category/1",contentType:"application/json; charset=utf-8",dataType:"json",cache:!1,async:!0});return a.done((function(e){null!=e&&t(e)})),function(){null!=a&&null!=a.abort&&a.abort()}},OnRemove:"edit"==n?function(e,t){return function(e,t){if(e.BaseConfigId>-1)te({fld:e,mode:"delete"});else{var n=M.findIndex((function(e){return e==t}));B((function(t){var a=l.cloneDeep(t);return a[n]=a[n].filter((function(t){return t.ID!=e.ID})),a})),O((function(e){return l.clone(e)}))}}(e,t)}:null,OnEdit:"edit"==n?function(e,t){return function(e,t){if(e.BaseConfigId>-1)return te({fld:e,mode:"edit"}),void r("editField");te({fld:z(z({},e),{BaseConfigId:t}),mode:"edit"}),r("editField")}(e,t)}:null}):null,"edit"==n?a.createElement(a.Fragment,null,a.createElement("hr",null),a.createElement("div",{className:"row"},a.createElement("div",{className:"col"},a.createElement("div",{className:"form-group",style:{width:"100%"}},a.createElement("div",{className:"custom-file"},a.createElement("input",{type:"file",className:"custom-file-input",accept:".ini,.par"}),a.createElement("label",{className:"custom-file-label"},"Choose a Configuration File if applicable")))),a.createElement("div",{className:"col"},a.createElement("button",{type:"button",className:"btn btn-primary btn-block",onClick:function(){r("new")}}," Add New Base Configuration ")))):null,"upload"==n?a.createElement(F,{Fields:S,setSelectedFields:I}):null,"new"==n?a.createElement(V,{Record:X,SetRecord:J,UniqueKey:Z}):null,"editField"==n?a.createElement(R,{Field:ae,Setter:le}):null),a.createElement(c.ToolTip,{Show:"Confirm"==g&&("edit"==n&&P.some((function(e){return 0==e.length}))||"new"==n&&!ye||"upload"==n&&0==w.length||"editField"==n&&!ge),Position:"top",Target:"ConfigConfirm",Zindex:9999},"new"!=n||null!=X.Name&&0!=X.Name.length?null:a.createElement("p",null," ",a.createElement("i",{style:{marginRight:"10px",color:"#dc3545"},className:"fa fa-exclamation-circle"}),"A Name is required."),"new"!=n||null!=X.Pattern&&0!=X.Pattern.length?null:a.createElement("p",null," ",a.createElement("i",{style:{marginRight:"10px",color:"#dc3545"},className:"fa fa-exclamation-circle"}),"A Pattern is required (e.g. *.ini or *.par for allINI or PAR Files)."),"new"==n&&null!=X.Name&&Z?a.createElement("p",null," ",a.createElement("i",{style:{marginRight:"10px",color:"#dc3545"},className:"fa fa-exclamation-circle"}),"Key needs to be unique."):null,"edit"==n&&P.some((function(e){return 0==e.length}))?a.createElement("p",null," ",a.createElement("i",{style:{marginRight:"10px",color:"#dc3545"},className:"fa fa-exclamation-circle"}),"At least 1 Field needs to be set up in Configuration '",j.find((function(e){return e.ID==M[P.findIndex((function(e){return 0==e.length}))]})).Name,"'."):null,"upload"==n&&0==w.length?a.createElement("p",null," ",a.createElement("i",{style:{marginRight:"10px",color:"#dc3545"},className:"fa fa-exclamation-circle"}),"At least one Field needs to be selected."):null,"editField"!=n||null!=ae.Name&&0!=ae.Name.length?null:a.createElement("p",null," ",a.createElement("i",{style:{marginRight:"10px",color:"#dc3545"},className:"fa fa-exclamation-circle"}),"A Field Key is required."),"editField"!=n||null!=ae.Label&&0!=ae.Label.length?null:a.createElement("p",null," ",a.createElement("i",{style:{marginRight:"10px",color:"#dc3545"},className:"fa fa-exclamation-circle"}),"A Field Name is required."),"editField"!=n||null!=ae.Value&&0!=ae.Value.length?null:a.createElement("p",null," ",a.createElement("i",{style:{marginRight:"10px",color:"#dc3545"},className:"fa fa-exclamation-circle"}),"A Value is required."),"editField"==n&&null!=ae.Value&&"number"==ae.FieldType&&isNaN(parseFloat(ae.Value))?a.createElement("p",null," ",a.createElement("i",{style:{marginRight:"10px",color:"#dc3545"},className:"fa fa-exclamation-circle"}),"A Value for a Number Field needs to be numeric."):null),a.createElement(c.Warning,{Title:"Close Configuration",CallBack:function(t){m(!1),t&&e.setShow(!1)},Show:d,Message:"This will close the Configuration and all unsaved changes will be lost."}),a.createElement(c.Warning,{Title:"Unable to Change Field",CallBack:function(e){ce(!1)},Show:se,Message:"This Field can not be edited or deleted. There are unresolved Compliance issues associated with it. Resolve these issues before changing the Configuration."}),a.createElement(c.Warning,{Title:"Remove PRC002 compliance Field",CallBack:function(t){t&&null!=ee&&"delete"==ee.mode&&$.ajax({type:"DELETE",url:homePath+"api/MiMD/PRC002/Field/Delete",contentType:"application/json; charset=utf-8",data:JSON.stringify(ee.fld),dataType:"json",cache:!1,async:!0}).then((function(t){$.ajax({type:"GET",url:homePath+"api/MiMD/PRC002/BaseConfig?parentID="+e.MeterID,contentType:"application/json; charset=utf-8",dataType:"json",cache:!1,async:!0}).done((function(e){null!=e&&q(e)}))})),oe(!1)},Show:ie,Message:"This will permanently delete this Field. Please confirm that this is desired. This action can not be undone."}),a.createElement(c.Warning,{Title:"Edit PRC002 compliance Field",CallBack:function(t){t&&null!=ae&&"edit"==ee.mode&&(r("edit"),$.ajax({type:"PATCH",url:homePath+"api/MiMD/PRC002/Field/Update",contentType:"application/json; charset=utf-8",data:JSON.stringify(ae),dataType:"json",cache:!1,async:!0}).then((function(t){$.ajax({type:"GET",url:homePath+"api/MiMD/PRC002/BaseConfig?parentID="+e.MeterID,contentType:"application/json; charset=utf-8",dataType:"json",cache:!1,async:!0}).done((function(e){null!=e&&q(e)}))}))),fe(!1)},Show:me,Message:"This will permanently change this Field. Please confirm that this is desired. This action can not be undone."}),a.createElement(c.LoadingScreen,{Show:o}))},U=function(){return(U=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var l in t=arguments[n])Object.prototype.hasOwnProperty.call(t,l)&&(e[l]=t[l]);return e}).apply(this,arguments)},X=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var a,l,r=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(a=r.next()).done;)i.push(a.value)}catch(e){l={error:e}}finally{try{a&&!a.done&&(n=r.return)&&n.call(r)}finally{if(l)throw l.error}}return i},J=[{key:"Name",label:"Name",type:"string"},{key:"AssetKey",label:"Asset Key",type:"string"},{key:"Make",label:"Make",type:"string"},{key:"Model",label:"Model",type:"string"},{key:"Status",label:"Compliance Status",type:"enum",enum:[]}];t.default=function(e){var t=Object(r.useHistory)(),n=X(a.useState([]),2),i=n[0],u=n[1],d=X(a.useState([]),2),m=d[0],f=d[1],h=X(a.useState(J),2),g=h[0],b=h[1],C=X(a.useState("Status"),2),S=C[0],E=C[1],D=X(a.useState(!1),2),v=D[0],N=D[1],w=X(a.useState([]),2),I=w[0],T=w[1],F=X(a.useState(null),2),M=F[0],L=F[1],x=X(a.useState("None"),2),R=x[0],V=x[1],k=X(a.useState(!1),2),P=k[0],B=k[1],A=X(a.useState(!1),2),j=A[0],O=A[1],H=X(a.useState(!1),2),z=H[0],Y=H[1],G=X(a.useState("Idle"),2),K=G[0],Z=G[1];return a.useEffect((function(){var e,t=((e=$.ajax({type:"GET",url:homePath+"api/MiMD/PRC002/ComplianceState/List",contentType:"application/json; charset=utf-8",dataType:"json",cache:!1,async:!0})).done((function(e){f(e)})),e);return function(){null!=t.abort&&t.abort()}}),[]),a.useEffect((function(){Z("Loading");var e,t,n,a=(e=J.map((function(e){return e.key})),t=i.map((function(t){return-1==e.findIndex((function(e){return e==t.FieldName}))?U(U({},t),{isPivotColumn:!0}):t})),(n=$.ajax({type:"POST",url:homePath+"api/MiMD/PRC002/ComplianceMeter/SearchableList",contentType:"application/json; charset=utf-8",dataType:"json",data:JSON.stringify({Searches:t,OrderBy:S,Ascending:v}),cache:!1,async:!0})).done((function(e){T(e),Z("Idle")})),n.fail((function(e){Z("Error")})),n);return function(){null!=a&&null!=a.abort&&a.abort()}}),[S,v,i]),a.useEffect((function(){var t=I.findIndex((function(t){return t.ID==e.MeterID}));L(-1==t?null:I[t])}),[e.MeterID,I]),a.useEffect((function(){var e=function(){var e=$.ajax({type:"GET",url:homePath+"api/MiMD/AdditionalField/ParentTable/Meter",contentType:"application/json; charset=utf-8",cache:!1,async:!0});return e.done((function(e){var t=l.orderBy(J.concat(e.map((function(e){return U({label:"[AF"+(null!=e.ExternalDB?" "+e.ExternalDB:"")+"] "+e.FieldName,key:e.FieldName},"string"==(t=e.Type)||"integer"==t||"number"==t||"datetime"==t||"boolean"==t?{type:t}:{type:"enum",enum:[{Label:t,Value:t}]});var t}))),["label"],["asc"]);b(t)})),e}();return function(){null!=e.abort&&e.abort()}}),[]),a.createElement("div",{style:{width:"100%",height:"100%"}},a.createElement(c.SearchBar,{SetFilter:u,CollumnList:g,defaultCollumn:{key:"Name",label:"Name",type:"string"},Direction:"left",Label:"Search",Width:"50%",GetEnum:function(e,t){if("Status"==t.key)return e(m.map((function(e){return{Label:e.Description,Value:e.Description}}))),function(){};var n=null;return"enum"!=t.type||null==t.enum||1!=t.enum.length?function(){}:((n=$.ajax({type:"GET",url:homePath+"api/ValueList/Group/"+t.enum[0].Value,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0})).done((function(t){return e(t.map((function(e){return{Value:e.Value.toString(),Label:e.Text}})))})),function(){null!=n&&null==n.abort&&n.abort()})},Result:"Loading"==K?a.createElement(c.LoadingIcon,{Show:!0}):"Error"==K?"Could not complete Search":"Found "+I.length+" Meters"},a.createElement("li",{className:"nav-item",style:{width:"50%",paddingRight:10}},a.createElement("fieldset",{className:"border",style:{padding:"10px",height:"100%"}},a.createElement("legend",{className:"w-auto",style:{fontSize:"large"}},"Actions:"),a.createElement("div",{className:"row"},a.createElement("div",{className:"col"},a.createElement("button",{type:"button",className:"btn btn-primary btn-block",onClick:function(){return B(!0)}}," Add New Meter to PRC002 ")),a.createElement("div",{className:"col"},a.createElement("button",{type:"button",className:"btn btn-primary btn-block"+(null==M?" disabled":""),"data-tooltip":"BaseConfig",onClick:function(){return O(null!=M)},onMouseOver:function(){return V("BaseConfig")},onMouseOut:function(){return V("None")}}," Meter Configuration "),a.createElement("button",{type:"button",className:"btn btn-primary btn-block"+(null==M?" disabled":""),onMouseOver:function(){return V("Files")},onMouseOut:function(){return V("None")},"data-tooltip":"Files",onClick:function(){return Y(null!=M)}}," Download Files ")))))),a.createElement(c.ToolTip,{Position:"bottom",Show:"Files"==R&&null==M,Target:"Files"},a.createElement("p",null," A Meter needs to be selected.")),a.createElement(c.ToolTip,{Position:"bottom",Show:"BaseConfig"==R&&null==M,Target:"BaseConfig"},a.createElement("p",null," A Meter needs to be selected.")),a.createElement(q,{MeterID:e.MeterID,setShow:O,show:j}),a.createElement(c.Modal,{Title:"Download Current Config File",Show:z,CallBack:function(e){Y(!1)},Size:"sm",ShowX:!0,ShowCancel:!1,ConfirmText:"Close"},a.createElement(y,{MeterId:e.MeterID})),a.createElement(W,{show:P,setShow:B}),a.createElement("div",{style:{width:"100%"}},a.createElement("div",{className:"row",style:{margin:0}},a.createElement("div",{className:"col",style:{width:"50%",height:"calc( 100% - 136px)",padding:0}},a.createElement(o.a,{cols:[{key:"Name",label:"Meter",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:"Model",label:"Model",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:"Make",label:"Make",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:"Status",label:"Status",headerStyle:{width:"auto"},rowStyle:{width:"auto"},content:function(e,t,n){var l=m.find((function(t){return t.ID===e.StatusID}));return a.createElement("div",{style:{fontWeight:600,width:"90%",height:"35px",background:null==l?"#f8f9fa":l.Color,border:"2px solid",borderRadius:"5px",textAlign:"center",lineHeight:"35px",textOverflow:"ellipsis",overflow:"hidden",color:null==l?"#212529":l.TextColor}}," ",e.Status," ")}}],tableClass:"table table-hover",data:I,sortField:S,ascending:v,onSort:function(e){e.col==S?N(!v):(E(e.col),N("Status"!=e.col))},onClick:function(e){var n;n=e.row.ID,t.push("index.cshtml?name=PRC002Overview&MeterID="+n)},theadStyle:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%"},tbodyStyle:{display:"block",overflowY:"scroll",maxHeight:"calc(100% - 80px)",width:"100%"},rowStyle:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%"},selected:function(t){return t.ID===e.MeterID}})),a.createElement("div",{className:"col",style:{width:"50%",height:"200px",padding:0}},a.createElement("div",{className:"row",style:{margin:0}},a.createElement(p,{MeterID:isNaN(e.MeterID)?-1:e.MeterID,stateList:m})),a.createElement("div",{className:"row",style:{margin:0}},a.createElement(s,{MeterId:isNaN(e.MeterID)?-1:e.MeterID,StateList:m}))))))}},52:function(e,t,n){"use strict";n.r(t);var a=n(0),l=n(3),r=n(21),i=n(10),o=n.n(i),u=n(9),s=n(12),c=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var a,l,r=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(a=r.next()).done;)i.push(a.value)}catch(e){l={error:e}}finally{try{a&&!a.done&&(n=r.return)&&n.call(r)}finally{if(l)throw l.error}}return i},d=function(e){var t=c(a.useState([]),2),n=t[0],l=t[1],r=c(a.useState("FieldCategory"),2),i=r[0],d=r[1],m=c(a.useState(!0),2),f=m[0],p=m[1];return a.useEffect((function(){var t=function(){var t=null;t=null==e.ActionID?$.ajax({type:"GET",url:homePath+"api/MiMD/PRC002/FieldValue/"+e.RecordID+"/"+i+"/"+(f?1:0),contentType:"application/json; charset=utf-8",dataType:"json",cache:!1,async:!0}):$.ajax({type:"GET",url:homePath+"api/MiMD/PRC002/FieldValue/History/"+e.ActionID+"/"+i+"/"+(f?1:0),contentType:"application/json; charset=utf-8",dataType:"json",cache:!1,async:!0});return t.done((function(e){l(e)})),t}();return function(){null!=t&&null!=t.abort&&t.abort()}}),[e.RecordID,e.ActionID,f,i]),a.createElement(a.Fragment,null,a.createElement(u.Modal,{Title:null==e.ActionID?"Current Configuration":"Related Configuration",Show:e.show,CallBack:function(t){e.setShow(!1)},Size:"lg",ShowX:!0,ShowCancel:!1,ConfirmText:"Close"},a.createElement("div",{style:{height:window.innerHeight-540,maxHeight:window.innerHeight-540}},a.createElement(o.a,{cols:[{key:"FieldCategory",label:"Category",headerStyle:{width:"auto"},rowStyle:{width:"auto"},content:function(e,t,n){return a.createElement(s.Input,{Record:e,Field:"FieldCategory",Disabled:!0,Label:"",Setter:function(e){},Valid:function(){return!0}})}},{key:"FieldLabel",label:"Field",headerStyle:{width:"auto"},rowStyle:{width:"auto"},content:function(e,t,n){return a.createElement(s.Input,{Record:e,Disabled:!0,Label:"",Field:null==e.FieldLabel||0==e.FieldLabel.length?"FieldName":"FieldLabel",Setter:function(e){},Valid:function(){return!0}})}},{key:"Value",label:"Value",headerStyle:{width:"auto"},rowStyle:{width:"auto"},content:function(e,t,n){return a.createElement(s.Input,{Record:e,Field:"Value",Disabled:!0,Label:"",Setter:function(e){},Valid:function(){return!0}})}},{key:"Valid",label:"Valid",headerStyle:{width:"auto"},rowStyle:{width:"auto"},content:function(e,t,n){return a.createElement("div",{style:{alignContent:"center",padding:".375rem .75rem",fontSize:"1.5rem",lineHeight:1.5}},a.createElement("i",{className:"fa "+(e.Valid?"fa-check-circle":"fa-exclamation-triangle"),"aria-hidden":"true"}))}}],tableClass:"table table-hover",data:n,sortField:i,ascending:f,onSort:function(e){e.col==i?p(!f):(d(e.col),p(!0))},onClick:function(e){},theadStyle:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%"},tbodyStyle:{display:"block",overflowY:"scroll",maxHeight:window.innerHeight-620,width:"100%"},rowStyle:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%"},selected:function(e){return!1}}))))},m=n(11),f=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var a,l,r=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(a=r.next()).done;)i.push(a.value)}catch(e){l={error:e}}finally{try{a&&!a.done&&(n=r.return)&&n.call(r)}finally{if(l)throw l.error}}return i},p=function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(f(arguments[t]));return e},h=function(e){return null==e.CurrentValue||null==e.Field?null:a.createElement(a.Fragment,null,a.createElement(s.Input,{Record:e.CurrentValue,Field:"Value",Setter:function(){},Valid:function(){return e.validRule},Label:"Current Value",Disabled:!0,Feedback:"The new Rule needs to allow the current Value."}),a.createElement("hr",null),a.createElement(s.Select,{Record:e.Field,Field:"FieldType",Options:[{Value:"string",Label:"Text"},{Value:"number",Label:"Number"}],Label:"Field Type",Disabled:!0,Setter:function(e){}}),a.createElement(s.Input,{Record:e.Field,Field:"Name",Setter:function(){},Valid:function(){return!0},Label:"Field",Disabled:!0}),a.createElement(s.Select,{Record:e.Field,Field:"Comparison",Options:"number"==e.Field.FieldType?[{Value:"=",Label:"="},{Value:"<>",Label:"<>"},{Value:">",Label:">"},{Value:"<",Label:"<"}]:[{Value:"=",Label:"="},{Value:"<>",Label:"<>"},{Value:"IN",Label:"In"}],Label:"Rule",Setter:function(t){e.Setter(t)}}),"IN"==e.Field.Comparison?a.createElement(y,{data:e.Field,Setter:function(t){e.Setter(t)}}):a.createElement(s.Input,{Record:e.Field,Field:"Value",Setter:function(t){e.Setter(t)},Valid:function(){return null!=e.Field.Value&&e.Field.Value.length>0&&("number"!=e.Field.FieldType||!isNaN(parseFloat(e.Field.Value)))},Label:"Value",Feedback:"number"!=e.Field.FieldType?"Value is required.":"Value is required and needs to be a number."}))},y=function(e){var t=f(a.useState([]),2),n=t[0],l=t[1];return a.useEffect((function(){l(e.data.Value.split(";"))}),[e.data]),a.createElement(a.Fragment,null,n.map((function(t,l){return a.createElement("div",{className:"form-group"},0==l?a.createElement("label",null,"Values"):null,a.createElement("div",{className:"input-group"},a.createElement("input",{className:"form-control",onChange:function(t){!function(t,a){var l=m.cloneDeep(e.data),r=m.clone(n);r[t]=a,l.Value=r.join(";"),e.Setter(l)}(l,t.target.value)},value:t}),a.createElement("div",{className:"input-group-append",onClick:function(){return function(t){var a=m.cloneDeep(e.data),l=m.clone(n);l.splice(t,1),a.Value=l.join(";"),e.Setter(a)}(l)}},a.createElement("span",{className:"input-group-text"},a.createElement("i",{className:"fa fa-trash-o","aria-hidden":"true"})))))})),a.createElement("button",{type:"button",className:"btn btn-primary btn-sm",onClick:function(){return t=m.cloneDeep(e.data),(a=m.clone(n)).push("string"==e.data.FieldType?"Value":"0"),t.Value=a.join(";"),void e.Setter(t);var t,a}}," Add "))},g=function(e){var t=Object(l.useHistory)(),n=f(a.useState("Note"),2),r=n[0],i=n[1],o=f(a.useState(""),2),s=o[0],c=o[1],d=f(a.useState(-1),2),y=d[0],g=d[1],b=f(a.useState([]),2),C=b[0],S=b[1],E=f(a.useState("None"),2),D=E[0],v=E[1],N=f(a.useState(!1),2),w=N[0],I=N[1],T=f(a.useState(!1),2),F=T[0],M=T[1],L=f(a.useState("Error"),2),x=L[0],R=L[1];function V(){i("Note"),g(-1),c(""),S([]),e.setShow(!1)}a.useEffect((function(){S([]);var t=[];return t=e.FieldList.map((function(e){return t=e.FieldId,(n=$.ajax({type:"GET",url:homePath+"api/MiMD/PRC002/Field/One/"+t,contentType:"application/json; charset=utf-8",dataType:"json",cache:!1,async:!0})).then((function(e){null!=e&&S((function(t){return p(t,[e])}))})),n;var t,n})),function(){t.forEach((function(e){null!=e&&null!=e.abort&&e.abort()}))}}),[e.FieldList]),a.useEffect((function(){if(R("Valid"),-1!=y&&0!=C.length&&!(C.length<=y)){R("Loading");var t=function(){if(null==C[y].Value)return R("Error"),null;var t=$.ajax({type:"POST",url:homePath+"api/MiMD/PRC002/Field/Check/"+e.FieldList[y].Value,contentType:"application/json; charset=utf-8",data:JSON.stringify(C[y]),dataType:"json",cache:!1,async:!0});return t.then((function(e){R(null!=e&&e?"Valid":"Error")})),t}();return function(){null!=t&&null!=t.abort&&t.abort()}}}),[C,y]);var k="Note"==r?s.length>0:!(null==C[y]||"Valid"!=x||null==C[y].Value||0==C[y].Value.length||"number"==C[y].FieldType&&isNaN(parseFloat(C[y].Value)));return a.createElement(a.Fragment,null,a.createElement(u.Modal,{Show:e.show,Title:"Note"==r?"Resolve Issue":"Change Base Configuration",CancelText:"Note"==r?"Cancel":"Back",ShowX:!0,ConfirmToolTip:"ResolveConfirm",Size:"lg",OnHover:v,ConfirmBtnClass:"btn-success"+(k?"":" disabled"),ConfirmText:y==e.FieldList.length-1?"Save":"Next",CallBack:function(t,n){t?"Note"==r?(i("Change"),0==e.FieldList.length?M(!0):g(0)):e.FieldList.length==y+1?M(!0):g((function(e){return e+1})):n?"Note"==r?I(!0):0==y?i("Note"):g((function(e){return e-1})):I(!0)}},"Note"==r?a.createElement("div",{className:"form-group"},a.createElement("label",null,"Note:"),a.createElement("textarea",{className:"form-control",rows:4,value:s,onChange:function(e){return c(e.target.value)}})):a.createElement(h,{validRule:"Error"!=x,Setter:function(e){return function(e,t){-1!=e&&S((function(e){var n=m.cloneDeep(e);return n[y]=t,n}))}(y,e)},CurrentValue:y>-1?e.FieldList[y]:void 0,Field:y>-1?C[y]:void 0})),a.createElement(u.ToolTip,{Show:"Confirm"==D&&!k,Position:"top",Target:"ResolveConfirm",Zindex:9999},"Note"==r&&0==s.length?a.createElement("p",null," ",a.createElement("i",{style:{marginRight:"10px",color:"#dc3545"},className:"fa fa-exclamation-circle"}),"A Note is required."):null,"Change"!=r||null==C[y]||null!=C[y].Value&&0!=C[y].Value.length?null:a.createElement("p",null," ",a.createElement("i",{style:{marginRight:"10px",color:"#dc3545"},className:"fa fa-exclamation-circle"}),"A Value is required."),"Change"==r&&null!=C[y]&&"number"==C[y].FieldType&&isNaN(parseFloat(C[y].Value))?a.createElement("p",null," ",a.createElement("i",{style:{marginRight:"10px",color:"#dc3545"},className:"fa fa-exclamation-circle"}),"Value is required to ne a number."):null,"Change"==r&&"Loading"==x?a.createElement(u.LoadingIcon,{Show:!0,Label:"Verifying New Rule..."}):null,"Change"==r&&"Error"==x?a.createElement("p",null," ",a.createElement("i",{style:{marginRight:"10px",color:"#dc3545"},className:"fa fa-exclamation-circle"}),"The new Rule needs to result in the current Value being Valid."):null),a.createElement(u.Warning,{Title:"Cancel",Message:"Warning all Changes will be lost and the new base configuration will not be applied",CallBack:function(e){e&&V(),I(!1)},Show:w}),a.createElement(u.Warning,{Title:"Warning",Message:"This will change the Base Configuration for this meter and can not be undone. A permanent compliance record will be created",Show:F,CallBack:function(n){n&&(C.forEach((function(e){return $.ajax({type:"PATCH",url:homePath+"api/MiMD/PRC002/Field/Update",contentType:"application/json; charset=utf-8",data:JSON.stringify(e),dataType:"json",cache:!1,async:!0})})),$.ajax({type:"POST",url:homePath+"api/MiMD/PRC002/Action/Add",contentType:"application/json; charset=utf-8",data:JSON.stringify({Note:s,StateId:e.stateList.find((function(e){return"In Compliance"==e.Description})).ID,RecordId:e.RecordID}),dataType:"json",cache:!1,async:!0}).then((function(e){return t.go(0)})),V()),M(!1)}}))},b=function(e){var t,n,l,r="MiMD"==e.data.UserAccount,i=null!=e.data.StateId,o=!r&&!i;return a.createElement("div",null,e.showTime?(l=e.data.Timestamp,moment(l).format("MM/DD/YY HH:mm CT")+": "):null,o?e.data.UserAccount+" added a Note":null,i?e.data.UserAccount+" Changed Status to ":null,i?(t=e.data.StateId,n=e.stateList.find((function(e){return e.ID==t})),a.createElement("span",{className:"badge",style:{background:null==n?"#6c757d":n.Color,color:null==n?"#ffffff":n.TextColor}},null==n?"Unknown":n.Description)):null,r&&!i?"MiMD received an updated Configuration File":null)},C=n(16),S=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var a,l,r=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(a=r.next()).done;)i.push(a.value)}catch(e){l={error:e}}finally{try{a&&!a.done&&(n=r.return)&&n.call(r)}finally{if(l)throw l.error}}return i},E=function(e){return a.createElement("div",{style:{width:"100%"}},a.createElement("div",null,e.label," has been in"),a.createElement("div",{style:{display:"flex"}},a.createElement("div",{style:{fontWeight:600,width:"45%",height:"35px",background:null==status?"#f8f9fa":e.status.Color,border:"2px solid",borderRadius:"5px",textAlign:"center",lineHeight:"35px",textOverflow:"ellipsis",overflow:"hidden",color:null==status?"#212529":e.status.TextColor,marginRight:"calc(5%)"}}," ",e.status.Description," "),a.createElement("div",{style:{fontWeight:600,width:"45%",height:"35px",background:e.T<30?"#28a745":e.T<60?"#ffc107":"#dc3545",color:e.T<30?"#ffffff":e.T<60?"#212529":"#ffffff",border:"2px solid",borderRadius:"5px",textAlign:"center",lineHeight:"35px",textOverflow:"ellipsis",overflow:"hidden"}}," ",e.T," Days")))},D=function(e){Object(l.useHistory)();var t=S(a.useState(void 0),2),n=t[0],i=t[1],o=S(a.useState(void 0),2),s=o[0],c=o[1],m=S(a.useState(void 0),2),f=m[0],p=m[1],h=S(a.useState(void 0),2),y=h[0],D=h[1],v=S(a.useState([]),2),N=v[0],w=v[1],I=S(a.useState(!1),2),T=I[0],F=I[1],M=S(a.useState(!1),2),L=M[0],x=M[1],R=S(a.useState(!1),2),V=R[0],k=R[1],P=S(a.useState(!1),2),B=P[0],A=P[1],j=S(a.useState(!1),2),O=j[0],H=j[1],W=S(a.useState(!1),2),z=W[0],Y=W[1],G=S(a.useState(!1),2),q=G[0],U=G[1];function X(e){return moment(e).format("MM/DD/YY HH:mm CT")}a.useEffect((function(){var t=function(e){if(-1==e)return null;var t=$.ajax({type:"GET",url:homePath+"api/MiMD/PRC002/ComplianceRecord/One/"+e,contentType:"application/json; charset=utf-8",dataType:"json",cache:!1,async:!0});return t.done((function(e){null!=e&&i(e)})),t}(e.RecordID);return function(){null!=t&&null!=t.abort&&t.abort()}}),[e.RecordID]),a.useEffect((function(){var t,n=((t=$.ajax({type:"GET",url:homePath+"api/MiMD/PRC002/FieldValue?parentID="+e.RecordID,contentType:"application/json; charset=utf-8",dataType:"json",cache:!1,async:!0})).done((function(e){w(e)})),t);return function(){null!=n&&null!=n.abort&&n.abort()}}),[e.RecordID]),a.useEffect((function(){var e=function(e){if(-1==e)return null;var t=$.ajax({type:"GET",url:homePath+"api/MiMD/PRC002/ComplianceMeter/One/"+e,contentType:"application/json; charset=utf-8",dataType:"json",cache:!1,async:!0});return t.done((function(e){null!=e&&c(e)})),t}(null==n?-1:n.MeterId),t=function(e){if(-1==e)return null;var t=$.ajax({type:"GET",url:homePath+"api/MiMD/PRC002/BaseConfig/ONE/"+e,contentType:"application/json; charset=utf-8",dataType:"json",cache:!1,async:!0});return t.done((function(e){null!=e&&D(e)})),t}(null==n||null==n.BaseConfigId?-1:n.BaseConfigId),a=function(e){if(-1==e)return null;var t=$.ajax({type:"GET",url:homePath+"api/MiMD/PRC002/Action/One/"+e,contentType:"application/json; charset=utf-8",dataType:"json",cache:!1,async:!0});return t.done((function(e){null!=e&&p(e)})),t}(null==n?-1:n.LastActionID);return function(){null!=e&&null!=e.abort&&e.abort(),null!=t&&null!=t.abort&&t.abort(),null!=a&&null!=a.abort&&a.abort()}}),[n]);var J=null==s?void 0:e.stateList.find((function(e){return e.ID==s.StatusID})),K=null==n?void 0:e.stateList.find((function(e){return e.ID==n.Status}));return a.createElement(a.Fragment,null,null==s?null:a.createElement(a.Fragment,null,a.createElement("div",{className:"col",style:{width:"25%",padding:5}},a.createElement(E,{label:"Configuration Change",status:K,T:n.Timer}),a.createElement(E,{label:"Meter "+s.Name,status:J,T:s.Timer})),a.createElement("div",{className:"col",style:{width:"25%",padding:5}},a.createElement("div",null," Issue Opened: ",X(n.Created)," by ",n.User),a.createElement("div",null," Last Action Taken: ",X(n.Timestamp)),a.createElement("div",null," Last Action: ",null!=f?a.createElement(b,{data:f,stateList:e.stateList,showTime:!1}):null," ")),null==y?null:a.createElement("div",{className:"col",style:{width:"25%",padding:5}},a.createElement("button",{type:"button",className:"btn btn-primary btn-block",onClick:function(){return Y(!0)}}," Base Configuration "),a.createElement("button",{type:"button",className:"btn btn-primary btn-block",onClick:function(){return U(!0)}}," Current Config Issues")),a.createElement("div",{className:"col",style:{width:"25%",padding:5}},a.createElement("button",{type:"button",className:"btn btn-info btn-block",onClick:function(){return H(!0)}}," Add Compliance Note "),"Acknowledged"==K.Description||"Reviewed"==K.Description?a.createElement("button",{type:"button",className:"btn btn-info btn-block",onClick:function(){return A(!0)}}," Submit Remedial Action Plan "):null,"Compliance Issue"==K.Description?a.createElement("button",{type:"button",className:"btn btn-primary btn-block",onClick:function(){return F(!0)}}," Acknowledge Issue "):null,"Acknowledged"==K.Description?a.createElement("button",{type:"button",className:"btn btn-primary btn-block",onClick:function(){return x(!0)}}," Review Issue "):null,"Reviewed"==K.Description?a.createElement("button",{type:"button",className:"btn btn-primary btn-block",onClick:function(){return k(!0)}}," Resolve Issue - Updated Base Config"):null),a.createElement(r.a,{RecordId:e.RecordID,state:null,show:O,setShow:H}),a.createElement(d,{RecordID:e.RecordID,show:q,setShow:U}),"Acknowledged"==K.Description||"Reviewed"==K.Description?a.createElement(r.a,{RecordId:e.RecordID,state:e.stateList.find((function(e){return"RAP Submitted"===e.Description})),show:B,setShow:A}):null,"Compliance Issue"==K.Description?a.createElement(r.a,{RecordId:e.RecordID,state:e.stateList.find((function(e){return"Acknowledged"===e.Description})),show:T,setShow:F}):null,"Acknowledged"==K.Description?a.createElement(r.a,{RecordId:e.RecordID,state:e.stateList.find((function(e){return"Reviewed"===e.Description})),show:L,setShow:x}):null,"Reviewed"==K.Description?a.createElement(g,{FieldList:N.filter((function(e){return!e.Valid})),RecordID:e.RecordID,stateList:e.stateList,show:V,setShow:k}):null,null==y?null:a.createElement(u.Modal,{Title:"Issue Base Configuration",Show:z,CallBack:function(e){Y(!1)},Size:"lg",ShowX:!0,ShowCancel:!1,ConfirmText:"Close"},a.createElement(C.a,{configurationList:[y]}))))},v=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var a,l,r=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(a=r.next()).done;)i.push(a.value)}catch(e){l={error:e}}finally{try{a&&!a.done&&(n=r.return)&&n.call(r)}finally{if(l)throw l.error}}return i},N=function(e){var t="MiMD"==e.data.UserAccount;return a.createElement("div",{className:"card"},a.createElement("div",{className:"card-header"},a.createElement(b,{data:e.data,stateList:e.stateList,showTime:!0})),a.createElement("div",{className:"card-body"},a.createElement("p",{className:"card-text"},e.data.Note),t?a.createElement("a",{href:"#",className:"btn btn-primary",onClick:function(){e.openConfig(e.data.ID),$("#currentConfig").show()}},"Show Configuration"):null))},w=function(e){Object(l.useHistory)();var t=v(a.useState([]),2),n=t[0],r=t[1],i=v(a.useState(!1),2),u=i[0],s=i[1],c=v(a.useState(-1),2),m=c[0],f=c[1],p=v(a.useState(!1),2),h=p[0],y=p[1];return a.useEffect((function(){var t=function(){if(-1==e.RecordId)return null;var t=$.ajax({type:"GET",url:homePath+"api/MiMD/PRC002/Action/"+e.RecordId+"/Timestamp/"+(u?1:0),contentType:"application/json; charset=utf-8",dataType:"json",cache:!1,async:!0});return t.done((function(e){r(e)})),t}();return function(){null!=t&&null!=t.abort&&t.abort()}}),[e.RecordId,u]),a.createElement(a.Fragment,null,m>0?a.createElement(d,{ActionID:m,show:h,setShow:y}):null,e.RecordId>-1?a.createElement(o.a,{cols:[{key:"ID",label:"Configuration Change History",headerStyle:{width:"auto"},rowStyle:{width:"auto"},content:function(t,n,l){return a.createElement(N,{data:t,stateList:e.StateList,openConfig:function(e){f(e),y(!0)}})}}],tableClass:"table table-hover",data:n,sortField:"ID",ascending:u,onSort:function(e){s(!u)},onClick:function(e){},theadStyle:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%"},tbodyStyle:{display:"block",overflowY:"scroll",maxHeight:window.innerHeight-300,width:"100%"},rowStyle:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%"},selected:function(e){return!1}}):null)},I=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var a,l,r=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(a=r.next()).done;)i.push(a.value)}catch(e){l={error:e}}finally{try{a&&!a.done&&(n=r.return)&&n.call(r)}finally{if(l)throw l.error}}return i};t.default=function(e){Object(l.useHistory)();var t=I(a.useState([]),2),n=t[0],r=t[1];return a.useEffect((function(){var e,t=((e=$.ajax({type:"GET",url:homePath+"api/MiMD/PRC002/ComplianceState/List",contentType:"application/json; charset=utf-8",dataType:"json",cache:!1,async:!0})).done((function(e){r(e)})),e);return function(){null!=t.abort&&t.abort()}}),[]),a.createElement("div",{style:{width:"100%",height:"100%"}},a.createElement("div",{style:{width:"100%"}},a.createElement("div",{className:"row",style:{margin:0,height:"200px"}},a.createElement(D,{stateList:n,RecordID:e.RecordId})),a.createElement("div",{className:"row",style:{margin:0}},a.createElement("div",{className:"col",style:{width:"100%",height:"calc( 100% - 136px)",padding:0}},a.createElement(w,{StateList:n,RecordId:e.RecordId})))))}},53:function(e,t,n){"use strict";n.r(t);var a=n(0),l=n.n(a),r=n(10),i=n.n(r),o=n(11),u=n(3),s=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var a,l,r=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(a=r.next()).done;)i.push(a.value)}catch(e){l={error:e}}finally{try{a&&!a.done&&(n=r.return)&&n.call(r)}finally{if(l)throw l.error}}return i},c=function(e){var t=Object(u.useHistory)(),n=s(l.a.useState([]),2),a=n[0],r=n[1],o=s(l.a.useState("LastWriteTime"),2),c=o[0],d=o[1],m=s(l.a.useState(!1),2),f=m[0],p=m[1];return l.a.useEffect((function(){if(!isNaN(e.MeterID)){var t=$.ajax({type:"GET",url:homePath+"api/MiMD/ConfigurationFiles/"+e.MeterID+"/LastWrites/"+c+"/"+(f?1:0),contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0});return t.done((function(e){return r(e)})),function(){null!=t.abort&&t.abort()}}}),[e.MeterID,f,c]),isNaN(e.MeterID)?null:l.a.createElement("div",{className:"card"},l.a.createElement("div",{className:"card-header"},"Configuration Files:"),l.a.createElement("div",{className:"card-body"},l.a.createElement(i.a,{cols:[{key:"FileName",label:"File",headerStyle:{width:"50%"},rowStyle:{width:"50%"}},{key:"LastWriteTime",label:"Last Write Time",headerStyle:{width:"auto"},rowStyle:{width:"auto"},content:function(e,t,n){var a,l,r;return n.backgroundColor=(a=e.LastWriteTime,l=moment(a),(r=moment().diff(l,"days"))<1?"red":r<7?"orange":r<30?"yellow":null),moment(e.LastWriteTime).format("MM/DD/YY HH:mm CT")}},{key:"Changes",label:"# of Changes",headerStyle:{width:"auto"},rowStyle:{width:"auto"}}],tableClass:"table table-hover",data:a,sortField:c,ascending:f,onSort:function(e){e.col==c?p(!f):(p("LastWriteTime"!=e.col),d(e.col))},onClick:function(n,a){return l=n.row.FileName,void t.push({pathname:homePath+"index.cshtml",search:"?name=Configuration&MeterID="+e.MeterID+"&FileName="+l,state:{}});var l},theadStyle:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%"},tbodyStyle:{display:"block",overflowY:"scroll",maxHeight:"150px",width:"100%"},rowStyle:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%"},selected:function(t){return t.FileName==e.FileName}})))},d=n(9),m=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var a,l,r=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(a=r.next()).done;)i.push(a.value)}catch(e){l={error:e}}finally{try{a&&!a.done&&(n=r.return)&&n.call(r)}finally{if(l)throw l.error}}return i},f=function(e){Object(u.useHistory)();var t=m(l.a.useState([]),2),n=t[0],a=t[1],r=m(l.a.useState("LastWriteTime"),2),o=r[0],s=r[1],c=m(l.a.useState(!1),2),f=c[0],p=c[1],h=m(l.a.useState(""),2),y=h[0],g=h[1],b=m(l.a.useState(!1),2),C=b[0],S=b[1],E=m(l.a.useState(!1),2),D=E[0],v=E[1];return l.a.useEffect((function(){if(!isNaN(e.MeterID)&&null!=e.FileName){var t=$.ajax({type:"GET",url:homePath+"api/MiMD/ConfigurationFiles/"+e.MeterID+"/"+e.FileName+"/"+C+"/"+o+"/"+(f?1:0),contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0});return t.done((function(e){return a(e)})),function(){null!=t.abort&&t.abort()}}}),[e.MeterID,e.FileName,C,f,o]),isNaN(e.MeterID)||null==e.FileName?null:l.a.createElement(l.a.Fragment,null,l.a.createElement("div",{className:"card"},l.a.createElement("div",{className:"card-header"},l.a.createElement("div",{className:"row"},l.a.createElement("div",{className:"col"},e.FileName," History:"),l.a.createElement("div",{className:"col"},l.a.createElement("div",{className:"form-check"},l.a.createElement("input",{type:"checkbox",className:"form-check-input",style:{zIndex:1},onChange:function(e){return S(!C)},value:C?"on":"off",checked:!!C}),l.a.createElement("label",{className:"form-check-label"},"Show Files w/o Changes"))))),l.a.createElement("div",{className:"card-body"},l.a.createElement(i.a,{cols:[{key:"LastWriteTime",label:"Last Write Time",headerStyle:{width:"auto"},rowStyle:{width:"auto"},content:function(e,t,n){var a,l,r;return n.backgroundColor=(a=e.LastWriteTime,l=moment(a),(r=moment().diff(l,"days"))<1?"red":r<7?"orange":r<30?"yellow":null),moment(e.LastWriteTime).format("MM/DD/YY HH:mm CT")}},{key:"Changes",label:"# of Changes",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:"FileName",label:"File",headerStyle:{width:"auto"},rowStyle:{width:"auto"},content:function(e){return l.a.createElement("button",{className:"btn btn-sm",onClick:function(t){v(!0),g("<p>"+e.Text.replace(/\n/g,"<br>")+"</p>")}},l.a.createElement("span",null,l.a.createElement("i",{className:"fa fa-file"})))}},{key:"Text",label:"Diff",headerStyle:{width:"auto"},rowStyle:{width:"auto"},content:function(e){return l.a.createElement("button",{className:"btn btn-sm",onClick:function(t){v(!0),g(e.Html.replace(/&para;/g,""))}},l.a.createElement("span",null,l.a.createElement("i",{className:"fa fa-eye"})))}}],tableClass:"table table-hover",data:n,sortField:o,ascending:f,onSort:function(e){"FileName"!=e.col&&"Text"!=e.col&&(e.col==o?p(!f):(p("LastWriteTime"!=e.col),s(e.col)))},onClick:function(){},theadStyle:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%"},tbodyStyle:{display:"block",overflowY:"scroll",maxHeight:"150px",width:"100%"},rowStyle:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%"},selected:function(e){return!1}}))),l.a.createElement(d.Modal,{Title:e.FileName,CallBack:function(){v(!1)},Size:"xlg",Show:D,ShowCancel:!1,ConfirmText:"Close",ShowX:!0},l.a.createElement("div",{className:"well",style:{backgroundColor:"lightgrey",fontSize:18,maxHeight:window.innerHeight-250,overflowY:"scroll"},dangerouslySetInnerHTML:{__html:y}})))},p=n(15),h=function(){return(h=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var l in t=arguments[n])Object.prototype.hasOwnProperty.call(t,l)&&(e[l]=t[l]);return e}).apply(this,arguments)},y=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var a,l,r=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(a=r.next()).done;)i.push(a.value)}catch(e){l={error:e}}finally{try{a&&!a.done&&(n=r.return)&&n.call(r)}finally{if(l)throw l.error}}return i},g=[{key:"Station",label:"Meter Name",type:"string"},{key:"Make",label:"Make",type:"string"},{key:"Model",label:"Model",type:"string"},{key:"TSC",label:"TSC",type:"enum",enum:[{Label:"TSC",Value:"TSC"}]},{key:"DateLastChanged",label:"Date Last Changed",type:"datetime"}];t.default=function(e){var t=Object(u.useHistory)(),n=y(a.useState(g),2),l=n[0],r=n[1],s=y(a.useState([]),2),m=s[0],b=s[1],C=y(a.useState([]),2),S=C[0],E=C[1],D=y(a.useState("DateLastChanged"),2),v=D[0],N=D[1],w=y(a.useState(!1),2),I=w[0],T=w[1],F=y(a.useState("Idle"),2),M=F[0],L=F[1];return a.useEffect((function(){L("Loading");var e=function(){var e=g.filter((function(e){return"TSC"!=e.key})).map((function(e){return e.key})),t=m.map((function(t){return-1==e.findIndex((function(e){return e==t.FieldName}))?h(h({},t),{isPivotColumn:!0}):t})),n=$.ajax({type:"POST",url:homePath+"api/MiMD/Meter/Config/SearchableList",contentType:"application/json; charset=utf-8",dataType:"json",data:JSON.stringify({Searches:t,OrderBy:v,Ascending:I}),cache:!1,async:!0});return n.done((function(e){E(e),L("Idle")})),n.fail((function(e){L("Error")})),n}();return function(){null!=e&&null!=e.abort&&e.abort()}}),[I,v,m]),a.useEffect((function(){var e=function(){var e=$.ajax({type:"GET",url:homePath+"api/MiMD/AdditionalField/ParentTable/Meter",contentType:"application/json; charset=utf-8",cache:!1,async:!0});return e.done((function(e){var t=o.orderBy(g.concat(e.map((function(e){return h({label:"[AF"+(null!=e.ExternalDB?" "+e.ExternalDB:"")+"] "+e.FieldName,key:e.FieldName},"string"==(t=e.Type)||"integer"==t||"number"==t||"datetime"==t||"boolean"==t?{type:t}:{type:"enum",enum:[{Label:t,Value:t}]});var t}))),["label"],["asc"]);r(t)})),e}();return function(){null!=e.abort&&e.abort()}}),[]),a.createElement("div",{style:{width:"100%",height:"100%"}},a.createElement(d.SearchBar,{CollumnList:l,SetFilter:function(e){return b(e)},Direction:"left",defaultCollumn:{key:"Station",label:"Station",type:"string"},Width:"50%",Label:"Search",GetEnum:function(e,t){var n=null;return"enum"!=t.type||null==t.enum||1!=t.enum.length?function(){}:((n=$.ajax({type:"GET",url:homePath+"api/ValueList/Group/"+t.enum[0].Value,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0})).done((function(t){return e(t.map((function(e){return{Value:e.Value.toString(),Label:e.Text}})))})),function(){null!=n&&null==n.abort&&n.abort()})},Result:"Loading"==M?a.createElement(d.LoadingIcon,{Show:!0}):"Error"==M?"Could not complete Search":"Found "+S.length+" Meters"}),a.createElement("div",{style:{width:"100%",height:"calc( 100% - 136px)"}},a.createElement("div",{className:"row",style:{margin:0,height:"100%"}},a.createElement("div",{className:"col",style:{width:"50%",height:"100%",padding:0}},a.createElement(i.a,{cols:[{key:"Station",label:"Meter Name",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:"Make",label:"Make",headerStyle:{width:"10%"},rowStyle:{width:"10%"}},{key:"Model",label:"Model",headerStyle:{width:"10%"},rowStyle:{width:"10%"}},{key:"TSC",label:"TSC",headerStyle:{width:"10%"},rowStyle:{width:"10%"}},{key:"DateLastChanged",label:"Date Last Changed",headerStyle:{width:"15%"},rowStyle:{width:"15%"},content:function(e,t,n){if(null==e[t]||""==e[t])return"";var a=moment(e[t]),l=moment().diff(a,"days");return l<1?n.backgroundColor="red":l<7?n.backgroundColor="orange":l<30&&(n.backgroundColor="yellow"),a.format("MM/DD/YY HH:mm CT")}},{key:null,label:"",headerStyle:{width:17,padding:0},rowStyle:{width:0,padding:0}}],tableClass:"table table-hover",data:S,sortField:v,ascending:I,onSort:function(e){e.col==v?T(!I):(N(e.col),T("DateLastChanged"!=e.col))},onClick:function(e,n){t.push({pathname:homePath+"index.cshtml",search:"?name=Configuration&MeterID="+e.row.MeterID,state:{}})},theadStyle:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%"},tbodyStyle:{display:"block",overflowY:"scroll",maxHeight:"calc( 100% - 70px)",width:"100%"},rowStyle:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%"},selected:function(t){return t.MeterID==e.MeterID}})),a.createElement("div",{className:"col",style:{height:"100%",padding:0,maxHeight:"100%",overflowY:"scroll"}},a.createElement(c,{MeterID:e.MeterID,FileName:e.FileName}),a.createElement(f,{MeterID:e.MeterID,FileName:e.FileName}),a.createElement(p.a,{ID:e.MeterID})))))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,