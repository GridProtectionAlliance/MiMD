(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{15:function(e,t,a){"use strict";var l=a(14),n=a.n(l),r=a(9),o=a(10),i=a.n(o),c=a(11),u=a.n(c),s=a(0),m=function(){return(m=Object.assign||function(e){for(var t,a=1,l=arguments.length;a<l;a++)for(var n in t=arguments[a])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e}).apply(this,arguments)},d=function(e,t){var a="function"==typeof Symbol&&e[Symbol.iterator];if(!a)return e;var l,n,r=a.call(e),o=[];try{for(;(void 0===t||t-- >0)&&!(l=r.next()).done;)o.push(l.value)}catch(e){n={error:e}}finally{try{l&&!l.done&&(a=r.return)&&a.call(r)}finally{if(n)throw n.error}}return o};t.a=function(e){var t=d(s.useState({ID:0,MeterID:e.ID,Note:"",UserAccount:"",Timestamp:""}),2),a=t[0],l=t[1],o=d(s.useState(!1),2),c=o[0],h=o[1],y=d(s.useState([]),2),f=y[0],p=y[1],b=d(s.useState("Timestamp"),2),S=b[0],w=b[1],N=d(s.useState(!1),2),g=N[0],T=N[1],v=d(s.useState(!1),2),M=v[0],E=v[1],D=d(s.useState(!1),2),C=D[0],k=D[1],x=d(s.useState(!1),2),F=x[0],L=x[1];if(s.useEffect((function(){var e=A();return function(){null!=e&&null!=e.abort&&e.abort()}}),[e.ID,g,S]),isNaN(e.ID))return null;function A(){if(e.ID<0)return null;var t=$.ajax({type:"GET",url:homePath+"api/MiMD/Note/"+e.ID+"/"+S+"/"+(g?1:0),contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0});return t.done((function(e){p(e)})),t}function I(e){$.ajax({type:"DELETE",url:homePath+"api/MiMD/Note/Delete",contentType:"application/json; charset=utf-8",data:JSON.stringify(e),cache:!0,async:!0}).done((function(){return A()}))}function j(t){$.ajax({type:"POST",url:homePath+"api/MiMD/Note/Add",contentType:"application/json; charset=utf-8",data:JSON.stringify(m(m({},t),{ID:0,MeterID:e.ID,Timestamp:moment().format("MM/DD/YYYY HH:mm"),UserAccount:""})),dataType:"json",cache:!0,async:!0}).done((function(t){A(),l({ID:0,MeterID:e.ID,Note:"",UserAccount:"",Timestamp:""})}))}return s.createElement("div",{className:"card",style:{marginBottom:10}},s.createElement("div",{className:"card-header"},s.createElement("div",{className:"row"},s.createElement("div",{className:"col"},s.createElement("h4",null,"Notes:")))),s.createElement("div",{className:"card-body"},s.createElement("div",null,s.createElement("div",null,s.createElement(i.a,{cols:[{key:"Note",label:"Note",headerStyle:{width:"50%"},rowStyle:{width:"50%"}},{key:"Timestamp",label:"Time",headerStyle:{width:"auto"},rowStyle:{width:"auto"},content:function(e){return moment.utc(e.Timestamp).format("MM/DD/YYYY HH:mm")}},{key:"UserAccount",label:"User",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:null,label:"",headerStyle:{width:"auto"},rowStyle:{width:"auto"},content:function(e){return s.createElement(s.Fragment,null,s.createElement("button",{className:"btn btn-sm",onClick:function(t){return l(e),void h(!0)}},s.createElement("span",null,s.createElement("i",{className:"fa fa-pencil"}))),s.createElement("button",{className:"btn btn-sm",onClick:function(t){return I(e)}},s.createElement("span",null,s.createElement("i",{className:"fa fa-times"}))))}}],tableClass:"table table-hover",data:f,sortField:S,ascending:g,onSort:function(e){e.col==S?T(!g):(T("Timestamp"!=e.col),w(e.col))},onClick:function(){},theadStyle:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%"},tbodyStyle:{display:"block",overflowY:"scroll",maxHeight:"150px",width:"100%"},rowStyle:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%"},selected:function(e){return e.ID==a.ID}}))),s.createElement(n.a,{Record:a,Rows:4,Field:"Note",Setter:function(e){return l(e)},Valid:function(){return null!=a.Note&&a.Note.length>0},Label:""}),s.createElement(r.Modal,{Show:c,Title:"Edit Note",ShowCancel:!0,CallBack:function(t){if(0!=a.Note.length||!t){if(h(!1),t){var n=u.a.cloneDeep(a);I(n),j(n)}l({ID:0,MeterID:e.ID,Note:"",UserAccount:"",Timestamp:""})}},ConfirmBtnClass:"btn-primary"+(null==a.Note||0==a.Note.length?" disabled":""),ShowX:!0,ConfirmToolTip:"Save",OnHover:function(e){return L("Confirm"==e)}},s.createElement(n.a,{Record:a,Rows:4,Field:"Note",Setter:function(e){null==e.Note?l(m(m({},e),{Note:""})):l(e)},Valid:function(){return null!=a.Note&&a.Note.length>0},Label:""})),s.createElement(r.ToolTip,{Show:F&&0==a.Note.length,Position:"top",Theme:"dark",Target:"Save",Zindex:9999},s.createElement("p",null," ",s.createElement("i",{style:{marginRight:"10px",color:"#dc3545"},className:"fa fa-exclamation-circle"}),"An empty Note can not be saved. "))),s.createElement("div",{className:"card-footer"},s.createElement("div",{className:"btn-group mr-2"},s.createElement("button",{className:"btn btn-primary"+(null==a.Note||0==a.Note.length?" disabled":""),onClick:function(){null!=a.Note&&a.Note.length>0&&j(a)},"data-tooltip":"Add",style:{cursor:null==a.Note||0==a.Note.length?"not-allowed":"pointer"},onMouseOver:function(){return E(!0)},onMouseOut:function(){return E(!1)}},"Add Note"),s.createElement(r.ToolTip,{Show:M&&(null==a.Note||0==a.Note.length),Position:"top",Theme:"dark",Target:"Add"},s.createElement("p",null," A note needs to be entered. "))),s.createElement("div",{className:"btn-group mr-2"},s.createElement("button",{className:"btn btn-default"+(null==a.Note||0==a.Note.length?" disabled":""),onClick:function(){return l((function(e){return m(m({},e),{Note:""})}))},style:{cursor:null==a.Note||0==a.Note.length?"not-allowed":"pointer"},"data-tooltip":"Remove",onMouseOver:function(){return k(!0)},onMouseOut:function(){return k(!1)}},"Clear"),s.createElement(r.ToolTip,{Show:C&&(null==a.Note||0==a.Note.length),Position:"top",Theme:"dark",Target:"Remove"},s.createElement("p",null," The note field is already empty. ")))))}},54:function(e,t,a){"use strict";a.r(t);var l=a(0),n=a.n(l),r=a(11),o=a(3),i=a(10),c=a.n(i),u=function(e,t){var a="function"==typeof Symbol&&e[Symbol.iterator];if(!a)return e;var l,n,r=a.call(e),o=[];try{for(;(void 0===t||t-- >0)&&!(l=r.next()).done;)o.push(l.value)}catch(e){n={error:e}}finally{try{l&&!l.done&&(a=r.return)&&a.call(r)}finally{if(n)throw n.error}}return o},s=function(e){var t=Object(o.useHistory)(),a=u(n.a.useState([]),2),l=a[0],r=a[1],i=u(n.a.useState("MaxAlarmWriteTime"),2),s=i[0],m=i[1],d=u(n.a.useState(!1),2),h=d[0],y=d[1];return n.a.useEffect((function(){if(!isNaN(e.MeterID)){var t=isNaN(e.MeterID)?null:$.ajax({type:"GET",url:homePath+"api/MiMD/DiagnosticFiles/"+e.MeterID+"/LastWrites/"+s+"/"+(h?1:0),contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0});return t.done((function(e){return r(e)})),function(){null!=t&&null!=t.abort&&t.abort()}}}),[e.MeterID]),isNaN(e.MeterID)?null:n.a.createElement("div",{className:"card"},n.a.createElement("div",{className:"card-header"},"Diagnostic Files:"),n.a.createElement("div",{className:"card-body"},n.a.createElement(c.a,{cols:[{key:"MaxChangeFileName",label:"File",headerStyle:{width:"50%"},rowStyle:{width:"50%"}},{key:"MaxChangeWriteTime",label:"Last Write Time",headerStyle:{width:"auto"},rowStyle:{width:"auto"},content:function(e){return null==e.MaxChangeWriteTime?"":moment(e.MaxChangeWriteTime).format("MM/DD/YY HH:mm CT")}},{key:"MaxAlarmWriteTime",label:"Last Alarm Time",headerStyle:{width:"auto"},rowStyle:{width:"auto"},content:function(e,t,a){var l,n,r;return a.backgroundColor=(l=e.MaxAlarmWriteTime,n=moment(l),(r=moment().diff(n,"days"))<1?"red":r<7?"orange":r<30?"yellow":null),null==e.MaxAlarmWriteTime?"":moment(e.MaxAlarmWriteTime).format("MM/DD/YY HH:mm CT")}},{key:"Alarms",label:"Alarms",headerStyle:{width:"auto"},rowStyle:{width:"auto"}}],tableClass:"table table-hover",data:l,sortField:s,ascending:h,onSort:function(e){e.col==s?y(!h):(y("MaxChangeFileName"!=e.col&&"MaxAlarmWriteTime"!=e.col&&"Alarms"!=e.col),m(e.col))},onClick:function(a,l){return n=a.row,void t.push({pathname:homePath+"index.cshtml",search:"?name=Diagnostic&MeterID="+e.MeterID+"&FileName="+n.MaxChangeFileName+"&Table="+n.MaxChangeTable,state:{}});var n},theadStyle:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%"},tbodyStyle:{display:"block",overflowY:"scroll",maxHeight:"150px",width:"100%"},rowStyle:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%"},selected:function(t){return t.MaxChangeFileName==e.FileName}})))},m=a(9),d=function(e,t){var a="function"==typeof Symbol&&e[Symbol.iterator];if(!a)return e;var l,n,r=a.call(e),o=[];try{for(;(void 0===t||t-- >0)&&!(l=r.next()).done;)o.push(l.value)}catch(e){n={error:e}}finally{try{l&&!l.done&&(a=r.return)&&a.call(r)}finally{if(n)throw n.error}}return o},h=function(e){Object(o.useHistory)();var t=d(n.a.useState([]),2),a=t[0],l=t[1],r=d(n.a.useState(""),2),i=r[0],u=r[1],s=d(n.a.useState(!1),2),h=s[0],y=s[1],f=d(n.a.useState(!1),2),p=f[0],b=f[1],S=d(n.a.useState("LastWriteTime"),2),w=S[0],N=S[1],g=d(n.a.useState(!1),2),T=g[0],v=g[1];return n.a.useEffect((function(){if(!isNaN(e.MeterID)&&null!=e.FileName){var t=$.ajax({type:"GET",url:homePath+"api/MiMD/DiagnosticFiles/"+e.Table+"/"+e.MeterID+"/"+e.FileName+"/"+h+"/"+w+"/"+(T?1:0),contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0});return t.done((function(e){return l(e)})),function(){null!=t.abort&&t.abort()}}}),[e.MeterID,e.FileName,h,T,w]),isNaN(e.MeterID)||null==e.FileName?null:n.a.createElement(n.a.Fragment,null,n.a.createElement("div",{className:"card"},n.a.createElement("div",{className:"card-header"},n.a.createElement("div",{className:"row"},n.a.createElement("div",{className:"col"},e.FileName," History:"),n.a.createElement("div",{className:"col"},n.a.createElement("div",{className:"form-check"},n.a.createElement("input",{type:"checkbox",className:"form-check-input",style:{zIndex:1},onChange:function(e){return y(!h)},value:h?"on":"off",checked:!!h}),n.a.createElement("label",{className:"form-check-label"},"Show Files w/o Alarms"))))),n.a.createElement("div",{className:"card-body"},n.a.createElement(c.a,{cols:[{key:"LastWriteTime",label:"Last Write Time",headerStyle:{width:"auto"},rowStyle:{width:"auto"},content:function(e){return moment(e.LastWriteTime).format("MM/DD/YY HH:mm CT")}},{key:"Alarms",label:"Alarms",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:"FileName",label:"AppStatusFileChanges"==e.Table?"File":"",headerStyle:{width:"auto"},rowStyle:{width:"auto"},content:function(t){return"AppStatusFileChanges"==e.Table?n.a.createElement("button",{className:"btn btn-sm",onClick:function(e){b(!0),u("<p>"+t.Text.replace(/\n/g,"<br>")+"</p>")}},n.a.createElement("span",null,n.a.createElement("i",{className:"fa fa-file"}))):null}},{key:null,label:"Diff",headerStyle:{width:"auto"},rowStyle:{width:"auto"},content:function(e){return n.a.createElement("button",{className:"btn btn-sm",onClick:function(t){b(!0),u(e.Html.replace(/&para;/g,""))}},n.a.createElement("span",null,n.a.createElement("i",{className:"fa fa-eye"})))}}],tableClass:"table table-hover",data:a,sortField:w,ascending:T,onSort:function(e){e.col==w?v(!T):(v("LastWriteTime"!=e.col&&"Alarms"!=e.col),N(e.col))},onClick:function(){},theadStyle:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%",height:60},tbodyStyle:{display:"block",overflowY:"scroll",maxHeight:500,width:"100%"},rowStyle:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%"},selected:function(e){return!1}}))),n.a.createElement(m.Modal,{Title:e.FileName,CallBack:function(){b(!1)},Size:"xlg",Show:p,ShowCancel:!1,ConfirmBtnClass:"btn-danger",ConfirmText:"Close"},n.a.createElement("div",{className:"well",style:{backgroundColor:"lightgrey",fontSize:18},dangerouslySetInnerHTML:{__html:i}})))},y=a(15),f=function(){return(f=Object.assign||function(e){for(var t,a=1,l=arguments.length;a<l;a++)for(var n in t=arguments[a])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e}).apply(this,arguments)},p=function(e,t){var a="function"==typeof Symbol&&e[Symbol.iterator];if(!a)return e;var l,n,r=a.call(e),o=[];try{for(;(void 0===t||t-- >0)&&!(l=r.next()).done;)o.push(l.value)}catch(e){n={error:e}}finally{try{l&&!l.done&&(a=r.return)&&a.call(r)}finally{if(n)throw n.error}}return o},b=[{key:"Station",label:"Device Name",type:"string"},{key:"Make",label:"Make",type:"string"},{key:"Model",label:"Model",type:"string"},{key:"TSC",label:"TSC",type:"enum",enum:[{Label:"TSC",Value:"TSC"}]},{key:"DateLastChanged",label:"Date Last Changed",type:"datetime"},{key:"MaxChangeFileName",label:"Last File",type:"string"},{key:"AlarmLastChanged",label:"Last Alarm",type:"datetime"},{key:"AlarmFileName",label:"Last File Alarmed",type:"string"},{key:"Alarms",label:"# of Alarms",type:"integer"}];t.default=function(e){var t=Object(o.useHistory)(),a=p(l.useState(b),2),n=a[0],i=a[1],u=p(l.useState([]),2),d=u[0],S=u[1],w=p(l.useState([]),2),N=w[0],g=w[1],T=p(l.useState("AlarmLastChanged"),2),v=T[0],M=T[1],E=p(l.useState(!1),2),D=E[0],C=E[1],k=p(l.useState("Idle"),2),x=k[0],F=k[1];return l.useEffect((function(){var e=function(){var e=$.ajax({type:"GET",url:homePath+"api/MiMD/AdditionalField/ParentTable/Meter",contentType:"application/json; charset=utf-8",cache:!1,async:!0});return e.done((function(e){var t=r.orderBy(b.concat(e.map((function(e){return f({label:"[AF"+(null!=e.ExternalDB?" "+e.ExternalDB:"")+"] "+e.FieldName,key:e.FieldName},"string"==(t=e.Type)||"integer"==t||"number"==t||"datetime"==t||"boolean"==t?{type:t}:{type:"enum",enum:[{Label:t,Value:t}]});var t}))),["label"],["asc"]);i(t)})),e}();return function(){null!=e.abort&&e.abort()}}),[]),l.useEffect((function(){F("Loading");var e,t,a,l=(e=b.filter((function(e){return"TSC"!=e.key})).map((function(e){return e.key})),t=d.map((function(t){return-1==e.findIndex((function(e){return e==t.FieldName}))?f(f({},t),{isPivotColumn:!0}):t})),(a=$.ajax({type:"POST",url:homePath+"api/MiMD/Meter/Diagnostic/SearchableList",contentType:"application/json; charset=utf-8",dataType:"json",data:JSON.stringify({Searches:t,OrderBy:v,Ascending:D}),cache:!1,async:!0})).done((function(e){g(e),F("Idle")})),a.fail((function(e){F("Error")})),a);return function(){null!=l&&null!=l.abort&&l.abort()}}),[D,v,d]),l.createElement("div",{style:{width:"100%",height:"100%"}},l.createElement(m.SearchBar,{CollumnList:n,SetFilter:function(e){return S(e)},Direction:"left",defaultCollumn:{key:"Station",label:"Station",type:"string"},Width:"65%",Label:"Search",GetEnum:function(e,t){var a=null;return"enum"!=t.type||null==t.enum||1!=t.enum.length?function(){}:((a=$.ajax({type:"GET",url:homePath+"api/ValueList/Group/"+t.enum[0].Value,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0})).done((function(t){return e(t.map((function(e){return{Value:e.Value.toString(),Label:e.Text}})))})),function(){null!=a&&null==a.abort&&a.abort()})},Result:"Loading"==x?l.createElement(m.LoadingIcon,{Show:!0}):"Error"==x?"Could not complete Search":"Found "+N.length+" Meters"}),l.createElement("div",{className:"row",style:{margin:0,height:"100%"}},l.createElement("div",{className:"col-7",style:{width:"65%",height:"calc( 100% - 136px)",padding:0}},l.createElement(c.a,{cols:[{key:"Station",label:"Device Name",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:"Make",label:"Make",headerStyle:{width:"5%"},rowStyle:{width:"5%"}},{key:"Model",label:"Model",headerStyle:{width:"5%"},rowStyle:{width:"5%"}},{key:"TSC",label:"TSC",headerStyle:{width:"5%"},rowStyle:{width:"5%"}},{key:"DateLastChanged",label:"Last Changed",headerStyle:{width:"15%"},rowStyle:{width:"15%"},content:function(e,t,a){return null==e[t]||""==e[t]?"":moment(e[t]).format("MM/DD/YY HH:mm CT")}},{key:"MaxChangeFileName",label:"Last File",headerStyle:{width:"10%"},rowStyle:{width:"10%"}},{key:"AlarmLastChanged",label:"Last Alarm",headerStyle:{width:"15%"},rowStyle:{width:"15%"},content:function(e,t,a){if(null==e[t]||""==e[t])return"";var l=moment(e[t]),n=moment().diff(l,"days");return n<1?a.backgroundColor="red":n<7?a.backgroundColor="orange":n<30&&(a.backgroundColor="yellow"),l.format("MM/DD/YY HH:mm CT")}},{key:"AlarmFileName",label:"Last File Alarmed",headerStyle:{width:"10%"},rowStyle:{width:"10%"}},{key:"Alarms",label:"Alarms",headerStyle:{width:"5%"},rowStyle:{width:"5%"}},{key:"LastFaultTime",label:"Last Fault",headerStyle:{width:"15%"},rowStyle:{width:"15%"},content:function(e,t,a){return null==e[t]||""==e[t]?"":moment(e[t]).format("MM/DD/YY HH:mm CT")}},{key:"FaultCount48hr",label:"Faults (48hr)",headerStyle:{width:"5%"},rowStyle:{width:"5%"}},{key:null,label:"",headerStyle:{width:17,padding:0},rowStyle:{width:0,padding:0}}],tableClass:"table table-hover",data:N,sortField:v,ascending:D,onSort:function(e){e.col==v?C(!D):(C("AlarmLastChanged"!=e.col&&"DateLastChanged"!=e.col&&"FaultCount48hr"!=e.col&&"Alarms"!=e.col),M(e.col))},onClick:function(e,a){t.push({pathname:homePath+"index.cshtml",search:"?name=Diagnostic&MeterID="+e.row.MeterID,state:{}})},theadStyle:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%",height:60},tbodyStyle:{display:"block",overflowY:"scroll",maxHeight:"calc( 100% - 70px)",width:"100%"},rowStyle:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%"},selected:function(t){return t.MeterID==e.MeterID}})),l.createElement("div",{className:"col",style:{padding:0,height:" 100%",overflowY:"scroll"}},l.createElement(s,{MeterID:e.MeterID,FileName:e.FileName}),l.createElement(h,{MeterID:e.MeterID,FileName:e.FileName,Table:e.Table}),l.createElement(y.a,{ID:e.MeterID}))))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,